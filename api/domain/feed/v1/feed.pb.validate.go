// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: domain/feed/v1/feed.proto

package domainfeedv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Post with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PostMultiError, or nil if none found.
func (m *Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := PostValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetTitle()) > 100 {
		err := PostValidationError{
			field:  "Title",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) > 500 {
		err := PostValidationError{
			field:  "Content",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetType()) > 20 {
		err := PostValidationError{
			field:  "Type",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for LikeCount

	// no validation rules for ShareCount

	// no validation rules for FavorCount

	// no validation rules for ViewCount

	// no validation rules for CommentId

	if len(errors) > 0 {
		return PostMultiError(errors)
	}

	return nil
}

// PostMultiError is an error wrapping multiple validation errors returned by
// Post.ValidateAll() if the designated constraints aren't met.
type PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMultiError) AllErrors() []error { return m }

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

// Validate checks the field values on PostCard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostCardMultiError, or nil
// if none found.
func (m *PostCard) ValidateAll() error {
	return m.validate(true)
}

func (m *PostCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := PostCardValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetType()) > 20 {
		err := PostCardValidationError{
			field:  "Type",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) > 100 {
		err := PostCardValidationError{
			field:  "Title",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostCardValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for LikeCount

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostCardValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PostCardMultiError(errors)
	}

	return nil
}

// PostCardMultiError is an error wrapping multiple validation errors returned
// by PostCard.ValidateAll() if the designated constraints aren't met.
type PostCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostCardMultiError) AllErrors() []error { return m }

// PostCardValidationError is the validation error returned by
// PostCard.Validate if the designated constraints aren't met.
type PostCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostCardValidationError) ErrorName() string { return "PostCardValidationError" }

// Error satisfies the builtin error interface
func (e PostCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostCardValidationError{}

// Validate checks the field values on Like with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Like) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Like with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LikeMultiError, or nil if none found.
func (m *Like) ValidateAll() error {
	return m.validate(true)
}

func (m *Like) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := LikeValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPostId() <= 0 {
		err := LikeValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := LikeValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return LikeMultiError(errors)
	}

	return nil
}

// LikeMultiError is an error wrapping multiple validation errors returned by
// Like.ValidateAll() if the designated constraints aren't met.
type LikeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeMultiError) AllErrors() []error { return m }

// LikeValidationError is the validation error returned by Like.Validate if the
// designated constraints aren't met.
type LikeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeValidationError) ErrorName() string { return "LikeValidationError" }

// Error satisfies the builtin error interface
func (e LikeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLike.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeValidationError{}

// Validate checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Share) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Share with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShareMultiError, or nil if none found.
func (m *Share) ValidateAll() error {
	return m.validate(true)
}

func (m *Share) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ShareValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPostId() <= 0 {
		err := ShareValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := ShareValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ShareMultiError(errors)
	}

	return nil
}

// ShareMultiError is an error wrapping multiple validation errors returned by
// Share.ValidateAll() if the designated constraints aren't met.
type ShareMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareMultiError) AllErrors() []error { return m }

// ShareValidationError is the validation error returned by Share.Validate if
// the designated constraints aren't met.
type ShareValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareValidationError) ErrorName() string { return "ShareValidationError" }

// Error satisfies the builtin error interface
func (e ShareValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShare.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareValidationError{}

// Validate checks the field values on Favor with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Favor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Favor with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FavorMultiError, or nil if none found.
func (m *Favor) ValidateAll() error {
	return m.validate(true)
}

func (m *Favor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FavorValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPostId() <= 0 {
		err := FavorValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := FavorValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return FavorMultiError(errors)
	}

	return nil
}

// FavorMultiError is an error wrapping multiple validation errors returned by
// Favor.ValidateAll() if the designated constraints aren't met.
type FavorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FavorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FavorMultiError) AllErrors() []error { return m }

// FavorValidationError is the validation error returned by Favor.Validate if
// the designated constraints aren't met.
type FavorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FavorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FavorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FavorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FavorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FavorValidationError) ErrorName() string { return "FavorValidationError" }

// Error satisfies the builtin error interface
func (e FavorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFavor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FavorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FavorValidationError{}

// Validate checks the field values on Relation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Relation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Relation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RelationMultiError, or nil
// if none found.
func (m *Relation) ValidateAll() error {
	return m.validate(true)
}

func (m *Relation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RelationValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFollowerUid() <= 0 {
		err := RelationValidationError{
			field:  "FollowerUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFolloweeUid() <= 0 {
		err := RelationValidationError{
			field:  "FolloweeUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return RelationMultiError(errors)
	}

	return nil
}

// RelationMultiError is an error wrapping multiple validation errors returned
// by Relation.ValidateAll() if the designated constraints aren't met.
type RelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RelationMultiError) AllErrors() []error { return m }

// RelationValidationError is the validation error returned by
// Relation.Validate if the designated constraints aren't met.
type RelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RelationValidationError) ErrorName() string { return "RelationValidationError" }

// Error satisfies the builtin error interface
func (e RelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RelationValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}

	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on BoolResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoolResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoolResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoolResponseMultiError, or
// nil if none found.
func (m *BoolResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BoolResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return BoolResponseMultiError(errors)
	}

	return nil
}

// BoolResponseMultiError is an error wrapping multiple validation errors
// returned by BoolResponse.ValidateAll() if the designated constraints aren't met.
type BoolResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolResponseMultiError) AllErrors() []error { return m }

// BoolResponseValidationError is the validation error returned by
// BoolResponse.Validate if the designated constraints aren't met.
type BoolResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolResponseValidationError) ErrorName() string { return "BoolResponseValidationError" }

// Error satisfies the builtin error interface
func (e BoolResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolResponseValidationError{}

// Validate checks the field values on CreatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreatePostReqMultiError, or
// nil if none found.
func (m *CreatePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostReqValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostReqMultiError(errors)
	}

	return nil
}

// CreatePostReqMultiError is an error wrapping multiple validation errors
// returned by CreatePostReq.ValidateAll() if the designated constraints
// aren't met.
type CreatePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostReqMultiError) AllErrors() []error { return m }

// CreatePostReqValidationError is the validation error returned by
// CreatePostReq.Validate if the designated constraints aren't met.
type CreatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostReqValidationError) ErrorName() string { return "CreatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostReqValidationError{}

// Validate checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostResponseMultiError, or nil if none found.
func (m *CreatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePostResponseMultiError(errors)
	}

	return nil
}

// CreatePostResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePostResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostResponseMultiError) AllErrors() []error { return m }

// CreatePostResponseValidationError is the validation error returned by
// CreatePostResponse.Validate if the designated constraints aren't met.
type CreatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResponseValidationError) ErrorName() string {
	return "CreatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResponseValidationError{}

// Validate checks the field values on UpdatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdatePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdatePostReqMultiError, or
// nil if none found.
func (m *UpdatePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostReqValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostReqMultiError(errors)
	}

	return nil
}

// UpdatePostReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePostReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostReqMultiError) AllErrors() []error { return m }

// UpdatePostReqValidationError is the validation error returned by
// UpdatePostReq.Validate if the designated constraints aren't met.
type UpdatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostReqValidationError) ErrorName() string { return "UpdatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostReqValidationError{}

// Validate checks the field values on UpdatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostResponseMultiError, or nil if none found.
func (m *UpdatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdatePostResponseMultiError(errors)
	}

	return nil
}

// UpdatePostResponseMultiError is an error wrapping multiple validation errors
// returned by UpdatePostResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostResponseMultiError) AllErrors() []error { return m }

// UpdatePostResponseValidationError is the validation error returned by
// UpdatePostResponse.Validate if the designated constraints aren't met.
type UpdatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostResponseValidationError) ErrorName() string {
	return "UpdatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostResponseValidationError{}

// Validate checks the field values on GetPostReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostReqMultiError, or
// nil if none found.
func (m *GetPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetPostReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostReqMultiError(errors)
	}

	return nil
}

// GetPostReqMultiError is an error wrapping multiple validation errors
// returned by GetPostReq.ValidateAll() if the designated constraints aren't met.
type GetPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostReqMultiError) AllErrors() []error { return m }

// GetPostReqValidationError is the validation error returned by
// GetPostReq.Validate if the designated constraints aren't met.
type GetPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostReqValidationError) ErrorName() string { return "GetPostReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostReqValidationError{}

// Validate checks the field values on GetPostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostResponseMultiError, or nil if none found.
func (m *GetPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostResponseValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostResponseValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostResponseMultiError(errors)
	}

	return nil
}

// GetPostResponseMultiError is an error wrapping multiple validation errors
// returned by GetPostResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostResponseMultiError) AllErrors() []error { return m }

// GetPostResponseValidationError is the validation error returned by
// GetPostResponse.Validate if the designated constraints aren't met.
type GetPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostResponseValidationError) ErrorName() string { return "GetPostResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostResponseValidationError{}

// Validate checks the field values on ListPostCardReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardReqMultiError, or nil if none found.
func (m *ListPostCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return ListPostCardReqMultiError(errors)
	}

	return nil
}

// ListPostCardReqMultiError is an error wrapping multiple validation errors
// returned by ListPostCardReq.ValidateAll() if the designated constraints
// aren't met.
type ListPostCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardReqMultiError) AllErrors() []error { return m }

// ListPostCardReqValidationError is the validation error returned by
// ListPostCardReq.Validate if the designated constraints aren't met.
type ListPostCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardReqValidationError) ErrorName() string { return "ListPostCardReqValidationError" }

// Error satisfies the builtin error interface
func (e ListPostCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardReqValidationError{}

// Validate checks the field values on ListPostCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardResponseMultiError, or nil if none found.
func (m *ListPostCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardResponseValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostCardResponseMultiError(errors)
	}

	return nil
}

// ListPostCardResponseMultiError is an error wrapping multiple validation
// errors returned by ListPostCardResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardResponseMultiError) AllErrors() []error { return m }

// ListPostCardResponseValidationError is the validation error returned by
// ListPostCardResponse.Validate if the designated constraints aren't met.
type ListPostCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardResponseValidationError) ErrorName() string {
	return "ListPostCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardResponseValidationError{}

// Validate checks the field values on ListPostCardByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsReqMultiError, or nil if none found.
func (m *ListPostCardByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPostCardByIdsReqMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsReqMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByIdsReq.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsReqMultiError) AllErrors() []error { return m }

// ListPostCardByIdsReqValidationError is the validation error returned by
// ListPostCardByIdsReq.Validate if the designated constraints aren't met.
type ListPostCardByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsReqValidationError) ErrorName() string {
	return "ListPostCardByIdsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsReqValidationError{}

// Validate checks the field values on ListPostCardByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsResponseMultiError, or nil if none found.
func (m *ListPostCardByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardByIdsResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardByIdsResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardByIdsResponseValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostCardByIdsResponseMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByIdsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPostCardByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsResponseMultiError) AllErrors() []error { return m }

// ListPostCardByIdsResponseValidationError is the validation error returned by
// ListPostCardByIdsResponse.Validate if the designated constraints aren't met.
type ListPostCardByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsResponseValidationError) ErrorName() string {
	return "ListPostCardByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsResponseValidationError{}

// Validate checks the field values on ListPostCardByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByUidReqMultiError, or nil if none found.
func (m *ListPostCardByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return ListPostCardByUidReqMultiError(errors)
	}

	return nil
}

// ListPostCardByUidReqMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByUidReq.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByUidReqMultiError) AllErrors() []error { return m }

// ListPostCardByUidReqValidationError is the validation error returned by
// ListPostCardByUidReq.Validate if the designated constraints aren't met.
type ListPostCardByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByUidReqValidationError) ErrorName() string {
	return "ListPostCardByUidReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByUidReqValidationError{}

// Validate checks the field values on ListPostCardByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByUidResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByUidResponseMultiError, or nil if none found.
func (m *ListPostCardByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardByUidResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardByUidResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardByUidResponseValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostCardByUidResponseMultiError(errors)
	}

	return nil
}

// ListPostCardByUidResponseMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByUidResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPostCardByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByUidResponseMultiError) AllErrors() []error { return m }

// ListPostCardByUidResponseValidationError is the validation error returned by
// ListPostCardByUidResponse.Validate if the designated constraints aren't met.
type ListPostCardByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByUidResponseValidationError) ErrorName() string {
	return "ListPostCardByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByUidResponseValidationError{}

// Validate checks the field values on ListTimelinePostCardWithTimestampReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListTimelinePostCardWithTimestampReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTimelinePostCardWithTimestampReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTimelinePostCardWithTimestampReqMultiError, or nil if none found.
func (m *ListTimelinePostCardWithTimestampReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimelinePostCardWithTimestampReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SortBy

	// no validation rules for SortOrder

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ListTimelinePostCardWithTimestampReqMultiError(errors)
	}

	return nil
}

// ListTimelinePostCardWithTimestampReqMultiError is an error wrapping multiple
// validation errors returned by
// ListTimelinePostCardWithTimestampReq.ValidateAll() if the designated
// constraints aren't met.
type ListTimelinePostCardWithTimestampReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimelinePostCardWithTimestampReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimelinePostCardWithTimestampReqMultiError) AllErrors() []error { return m }

// ListTimelinePostCardWithTimestampReqValidationError is the validation error
// returned by ListTimelinePostCardWithTimestampReq.Validate if the designated
// constraints aren't met.
type ListTimelinePostCardWithTimestampReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimelinePostCardWithTimestampReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimelinePostCardWithTimestampReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimelinePostCardWithTimestampReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimelinePostCardWithTimestampReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimelinePostCardWithTimestampReqValidationError) ErrorName() string {
	return "ListTimelinePostCardWithTimestampReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimelinePostCardWithTimestampReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimelinePostCardWithTimestampReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimelinePostCardWithTimestampReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimelinePostCardWithTimestampReqValidationError{}

// Validate checks the field values on
// ListTimelinePostCardWithTimestampResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTimelinePostCardWithTimestampResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTimelinePostCardWithTimestampResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTimelinePostCardWithTimestampResponseMultiError, or nil if none found.
func (m *ListTimelinePostCardWithTimestampResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimelinePostCardWithTimestampResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimelinePostCardWithTimestampResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimelinePostCardWithTimestampResponseValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimelinePostCardWithTimestampResponseValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListTimelinePostCardWithTimestampResponseMultiError(errors)
	}

	return nil
}

// ListTimelinePostCardWithTimestampResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListTimelinePostCardWithTimestampResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTimelinePostCardWithTimestampResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimelinePostCardWithTimestampResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimelinePostCardWithTimestampResponseMultiError) AllErrors() []error { return m }

// ListTimelinePostCardWithTimestampResponseValidationError is the validation
// error returned by ListTimelinePostCardWithTimestampResponse.Validate if the
// designated constraints aren't met.
type ListTimelinePostCardWithTimestampResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimelinePostCardWithTimestampResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimelinePostCardWithTimestampResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimelinePostCardWithTimestampResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimelinePostCardWithTimestampResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimelinePostCardWithTimestampResponseValidationError) ErrorName() string {
	return "ListTimelinePostCardWithTimestampResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimelinePostCardWithTimestampResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimelinePostCardWithTimestampResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimelinePostCardWithTimestampResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimelinePostCardWithTimestampResponseValidationError{}

// Validate checks the field values on DeletePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeletePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeletePostReqMultiError, or
// nil if none found.
func (m *DeletePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeletePostReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostReqMultiError(errors)
	}

	return nil
}

// DeletePostReqMultiError is an error wrapping multiple validation errors
// returned by DeletePostReq.ValidateAll() if the designated constraints
// aren't met.
type DeletePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostReqMultiError) AllErrors() []error { return m }

// DeletePostReqValidationError is the validation error returned by
// DeletePostReq.Validate if the designated constraints aren't met.
type DeletePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReqValidationError) ErrorName() string { return "DeletePostReqValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReqValidationError{}

// Validate checks the field values on ListVideoPostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListVideoPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVideoPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVideoPostReqMultiError, or nil if none found.
func (m *ListVideoPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVideoPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SortBy

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return ListVideoPostReqMultiError(errors)
	}

	return nil
}

// ListVideoPostReqMultiError is an error wrapping multiple validation errors
// returned by ListVideoPostReq.ValidateAll() if the designated constraints
// aren't met.
type ListVideoPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVideoPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVideoPostReqMultiError) AllErrors() []error { return m }

// ListVideoPostReqValidationError is the validation error returned by
// ListVideoPostReq.Validate if the designated constraints aren't met.
type ListVideoPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideoPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideoPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideoPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideoPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideoPostReqValidationError) ErrorName() string { return "ListVideoPostReqValidationError" }

// Error satisfies the builtin error interface
func (e ListVideoPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideoPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideoPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideoPostReqValidationError{}

// Validate checks the field values on ListVideoPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVideoPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVideoPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVideoPostResponseMultiError, or nil if none found.
func (m *ListVideoPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVideoPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVideoPostResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVideoPostResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVideoPostResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListVideoPostResponseMultiError(errors)
	}

	return nil
}

// ListVideoPostResponseMultiError is an error wrapping multiple validation
// errors returned by ListVideoPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVideoPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVideoPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVideoPostResponseMultiError) AllErrors() []error { return m }

// ListVideoPostResponseValidationError is the validation error returned by
// ListVideoPostResponse.Validate if the designated constraints aren't met.
type ListVideoPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideoPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideoPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideoPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideoPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideoPostResponseValidationError) ErrorName() string {
	return "ListVideoPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVideoPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideoPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideoPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideoPostResponseValidationError{}

// Validate checks the field values on AddFollowReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFollowReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFollowReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFollowReqMultiError, or
// nil if none found.
func (m *AddFollowReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFollowReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFollowerUid() <= 0 {
		err := AddFollowReqValidationError{
			field:  "FollowerUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFolloweeUid() <= 0 {
		err := AddFollowReqValidationError{
			field:  "FolloweeUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFollowReqMultiError(errors)
	}

	return nil
}

// AddFollowReqMultiError is an error wrapping multiple validation errors
// returned by AddFollowReq.ValidateAll() if the designated constraints aren't met.
type AddFollowReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFollowReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFollowReqMultiError) AllErrors() []error { return m }

// AddFollowReqValidationError is the validation error returned by
// AddFollowReq.Validate if the designated constraints aren't met.
type AddFollowReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFollowReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFollowReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFollowReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFollowReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFollowReqValidationError) ErrorName() string { return "AddFollowReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFollowReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFollowReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFollowReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFollowReqValidationError{}

// Validate checks the field values on CancelFollowReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelFollowReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFollowReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFollowReqMultiError, or nil if none found.
func (m *CancelFollowReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFollowReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFollowerUid() <= 0 {
		err := CancelFollowReqValidationError{
			field:  "FollowerUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFolloweeUid() <= 0 {
		err := CancelFollowReqValidationError{
			field:  "FolloweeUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelFollowReqMultiError(errors)
	}

	return nil
}

// CancelFollowReqMultiError is an error wrapping multiple validation errors
// returned by CancelFollowReq.ValidateAll() if the designated constraints
// aren't met.
type CancelFollowReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFollowReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFollowReqMultiError) AllErrors() []error { return m }

// CancelFollowReqValidationError is the validation error returned by
// CancelFollowReq.Validate if the designated constraints aren't met.
type CancelFollowReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFollowReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFollowReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFollowReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFollowReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFollowReqValidationError) ErrorName() string { return "CancelFollowReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelFollowReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFollowReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFollowReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFollowReqValidationError{}

// Validate checks the field values on IsFollowReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFollowReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFollowReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFollowReqMultiError, or
// nil if none found.
func (m *IsFollowReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFollowReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFollowerUid() <= 0 {
		err := IsFollowReqValidationError{
			field:  "FollowerUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFolloweeUid() <= 0 {
		err := IsFollowReqValidationError{
			field:  "FolloweeUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsFollowReqMultiError(errors)
	}

	return nil
}

// IsFollowReqMultiError is an error wrapping multiple validation errors
// returned by IsFollowReq.ValidateAll() if the designated constraints aren't met.
type IsFollowReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFollowReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFollowReqMultiError) AllErrors() []error { return m }

// IsFollowReqValidationError is the validation error returned by
// IsFollowReq.Validate if the designated constraints aren't met.
type IsFollowReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFollowReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFollowReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFollowReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFollowReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFollowReqValidationError) ErrorName() string { return "IsFollowReqValidationError" }

// Error satisfies the builtin error interface
func (e IsFollowReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFollowReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFollowReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFollowReqValidationError{}

// Validate checks the field values on ListFollowerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFollowerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFollowerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFollowerReqMultiError, or nil if none found.
func (m *ListFollowerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFollowerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFolloweeUid() <= 0 {
		err := ListFollowerReqValidationError{
			field:  "FolloweeUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFollowerReqMultiError(errors)
	}

	return nil
}

// ListFollowerReqMultiError is an error wrapping multiple validation errors
// returned by ListFollowerReq.ValidateAll() if the designated constraints
// aren't met.
type ListFollowerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFollowerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFollowerReqMultiError) AllErrors() []error { return m }

// ListFollowerReqValidationError is the validation error returned by
// ListFollowerReq.Validate if the designated constraints aren't met.
type ListFollowerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFollowerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFollowerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFollowerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFollowerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFollowerReqValidationError) ErrorName() string { return "ListFollowerReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFollowerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFollowerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFollowerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFollowerReqValidationError{}

// Validate checks the field values on ListFolloweeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFolloweeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFolloweeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFolloweeReqMultiError, or nil if none found.
func (m *ListFolloweeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFolloweeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFollowerUid() <= 0 {
		err := ListFolloweeReqValidationError{
			field:  "FollowerUid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFolloweeReqMultiError(errors)
	}

	return nil
}

// ListFolloweeReqMultiError is an error wrapping multiple validation errors
// returned by ListFolloweeReq.ValidateAll() if the designated constraints
// aren't met.
type ListFolloweeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFolloweeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFolloweeReqMultiError) AllErrors() []error { return m }

// ListFolloweeReqValidationError is the validation error returned by
// ListFolloweeReq.Validate if the designated constraints aren't met.
type ListFolloweeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFolloweeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFolloweeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFolloweeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFolloweeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFolloweeReqValidationError) ErrorName() string { return "ListFolloweeReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFolloweeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFolloweeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFolloweeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFolloweeReqValidationError{}

// Validate checks the field values on ListFollowerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFollowerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFollowerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFollowerResponseMultiError, or nil if none found.
func (m *ListFollowerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFollowerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFollowerResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFollowerResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFollowerResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFollowerResponseMultiError(errors)
	}

	return nil
}

// ListFollowerResponseMultiError is an error wrapping multiple validation
// errors returned by ListFollowerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFollowerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFollowerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFollowerResponseMultiError) AllErrors() []error { return m }

// ListFollowerResponseValidationError is the validation error returned by
// ListFollowerResponse.Validate if the designated constraints aren't met.
type ListFollowerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFollowerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFollowerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFollowerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFollowerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFollowerResponseValidationError) ErrorName() string {
	return "ListFollowerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFollowerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFollowerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFollowerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFollowerResponseValidationError{}

// Validate checks the field values on ListFolloweeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFolloweeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFolloweeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFolloweeResponseMultiError, or nil if none found.
func (m *ListFolloweeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFolloweeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFolloweeResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFolloweeResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFolloweeResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFolloweeResponseMultiError(errors)
	}

	return nil
}

// ListFolloweeResponseMultiError is an error wrapping multiple validation
// errors returned by ListFolloweeResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFolloweeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFolloweeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFolloweeResponseMultiError) AllErrors() []error { return m }

// ListFolloweeResponseValidationError is the validation error returned by
// ListFolloweeResponse.Validate if the designated constraints aren't met.
type ListFolloweeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFolloweeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFolloweeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFolloweeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFolloweeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFolloweeResponseValidationError) ErrorName() string {
	return "ListFolloweeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFolloweeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFolloweeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFolloweeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFolloweeResponseValidationError{}

// Validate checks the field values on GetPostStatReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostStatReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostStatReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostStatReqMultiError,
// or nil if none found.
func (m *GetPostStatReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostStatReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := GetPostStatReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostStatReqMultiError(errors)
	}

	return nil
}

// GetPostStatReqMultiError is an error wrapping multiple validation errors
// returned by GetPostStatReq.ValidateAll() if the designated constraints
// aren't met.
type GetPostStatReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostStatReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostStatReqMultiError) AllErrors() []error { return m }

// GetPostStatReqValidationError is the validation error returned by
// GetPostStatReq.Validate if the designated constraints aren't met.
type GetPostStatReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostStatReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostStatReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostStatReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostStatReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostStatReqValidationError) ErrorName() string { return "GetPostStatReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPostStatReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostStatReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostStatReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostStatReqValidationError{}

// Validate checks the field values on GetPostStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostStatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostStatResponseMultiError, or nil if none found.
func (m *GetPostStatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostStatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LikeCount

	// no validation rules for ShareCount

	// no validation rules for ViewCount

	// no validation rules for FavorCount

	if len(errors) > 0 {
		return GetPostStatResponseMultiError(errors)
	}

	return nil
}

// GetPostStatResponseMultiError is an error wrapping multiple validation
// errors returned by GetPostStatResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostStatResponseMultiError) AllErrors() []error { return m }

// GetPostStatResponseValidationError is the validation error returned by
// GetPostStatResponse.Validate if the designated constraints aren't met.
type GetPostStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostStatResponseValidationError) ErrorName() string {
	return "GetPostStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostStatResponseValidationError{}

// Validate checks the field values on AddLikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddLikeReqMultiError, or
// nil if none found.
func (m *AddLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddLikeReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddLikeReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddLikeReqMultiError(errors)
	}

	return nil
}

// AddLikeReqMultiError is an error wrapping multiple validation errors
// returned by AddLikeReq.ValidateAll() if the designated constraints aren't met.
type AddLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeReqMultiError) AllErrors() []error { return m }

// AddLikeReqValidationError is the validation error returned by
// AddLikeReq.Validate if the designated constraints aren't met.
type AddLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeReqValidationError) ErrorName() string { return "AddLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeReqValidationError{}

// Validate checks the field values on CancelLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelLikeReqMultiError, or
// nil if none found.
func (m *CancelLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelLikeReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelLikeReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelLikeReqMultiError(errors)
	}

	return nil
}

// CancelLikeReqMultiError is an error wrapping multiple validation errors
// returned by CancelLikeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeReqMultiError) AllErrors() []error { return m }

// CancelLikeReqValidationError is the validation error returned by
// CancelLikeReq.Validate if the designated constraints aren't met.
type CancelLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeReqValidationError) ErrorName() string { return "CancelLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeReqValidationError{}

// Validate checks the field values on IsLikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsLikeReqMultiError, or nil
// if none found.
func (m *IsLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := IsLikeReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := IsLikeReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsLikeReqMultiError(errors)
	}

	return nil
}

// IsLikeReqMultiError is an error wrapping multiple validation errors returned
// by IsLikeReq.ValidateAll() if the designated constraints aren't met.
type IsLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsLikeReqMultiError) AllErrors() []error { return m }

// IsLikeReqValidationError is the validation error returned by
// IsLikeReq.Validate if the designated constraints aren't met.
type IsLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsLikeReqValidationError) ErrorName() string { return "IsLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e IsLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsLikeReqValidationError{}

// Validate checks the field values on ListLikeByPostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLikeByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLikeByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLikeByPostReqMultiError, or nil if none found.
func (m *ListLikeByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLikeByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := ListLikeByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLikeByPostReqMultiError(errors)
	}

	return nil
}

// ListLikeByPostReqMultiError is an error wrapping multiple validation errors
// returned by ListLikeByPostReq.ValidateAll() if the designated constraints
// aren't met.
type ListLikeByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLikeByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLikeByPostReqMultiError) AllErrors() []error { return m }

// ListLikeByPostReqValidationError is the validation error returned by
// ListLikeByPostReq.Validate if the designated constraints aren't met.
type ListLikeByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLikeByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLikeByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLikeByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLikeByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLikeByPostReqValidationError) ErrorName() string {
	return "ListLikeByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListLikeByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLikeByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLikeByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLikeByPostReqValidationError{}

// Validate checks the field values on ListLikeByPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLikeByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLikeByPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLikeByPostResponseMultiError, or nil if none found.
func (m *ListLikeByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLikeByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLikes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLikeByPostResponseValidationError{
						field:  fmt.Sprintf("Likes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLikeByPostResponseValidationError{
						field:  fmt.Sprintf("Likes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLikeByPostResponseValidationError{
					field:  fmt.Sprintf("Likes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListLikeByPostResponseMultiError(errors)
	}

	return nil
}

// ListLikeByPostResponseMultiError is an error wrapping multiple validation
// errors returned by ListLikeByPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLikeByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLikeByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLikeByPostResponseMultiError) AllErrors() []error { return m }

// ListLikeByPostResponseValidationError is the validation error returned by
// ListLikeByPostResponse.Validate if the designated constraints aren't met.
type ListLikeByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLikeByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLikeByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLikeByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLikeByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLikeByPostResponseValidationError) ErrorName() string {
	return "ListLikeByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLikeByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLikeByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLikeByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLikeByPostResponseValidationError{}

// Validate checks the field values on ListLikeByUidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLikeByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLikeByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLikeByUidReqMultiError, or nil if none found.
func (m *ListLikeByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLikeByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListLikeByUidReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListLikeByUidReqMultiError(errors)
	}

	return nil
}

// ListLikeByUidReqMultiError is an error wrapping multiple validation errors
// returned by ListLikeByUidReq.ValidateAll() if the designated constraints
// aren't met.
type ListLikeByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLikeByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLikeByUidReqMultiError) AllErrors() []error { return m }

// ListLikeByUidReqValidationError is the validation error returned by
// ListLikeByUidReq.Validate if the designated constraints aren't met.
type ListLikeByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLikeByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLikeByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLikeByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLikeByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLikeByUidReqValidationError) ErrorName() string { return "ListLikeByUidReqValidationError" }

// Error satisfies the builtin error interface
func (e ListLikeByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLikeByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLikeByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLikeByUidReqValidationError{}

// Validate checks the field values on ListLikeByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLikeByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLikeByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLikeByUidResponseMultiError, or nil if none found.
func (m *ListLikeByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLikeByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLikes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLikeByUidResponseValidationError{
						field:  fmt.Sprintf("Likes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLikeByUidResponseValidationError{
						field:  fmt.Sprintf("Likes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLikeByUidResponseValidationError{
					field:  fmt.Sprintf("Likes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListLikeByUidResponseMultiError(errors)
	}

	return nil
}

// ListLikeByUidResponseMultiError is an error wrapping multiple validation
// errors returned by ListLikeByUidResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLikeByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLikeByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLikeByUidResponseMultiError) AllErrors() []error { return m }

// ListLikeByUidResponseValidationError is the validation error returned by
// ListLikeByUidResponse.Validate if the designated constraints aren't met.
type ListLikeByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLikeByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLikeByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLikeByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLikeByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLikeByUidResponseValidationError) ErrorName() string {
	return "ListLikeByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLikeByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLikeByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLikeByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLikeByUidResponseValidationError{}

// Validate checks the field values on GetLikeCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLikeCountByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLikeCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLikeCountByPostReqMultiError, or nil if none found.
func (m *GetLikeCountByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLikeCountByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := GetLikeCountByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLikeCountByPostReqMultiError(errors)
	}

	return nil
}

// GetLikeCountByPostReqMultiError is an error wrapping multiple validation
// errors returned by GetLikeCountByPostReq.ValidateAll() if the designated
// constraints aren't met.
type GetLikeCountByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLikeCountByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLikeCountByPostReqMultiError) AllErrors() []error { return m }

// GetLikeCountByPostReqValidationError is the validation error returned by
// GetLikeCountByPostReq.Validate if the designated constraints aren't met.
type GetLikeCountByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLikeCountByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLikeCountByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLikeCountByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLikeCountByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLikeCountByPostReqValidationError) ErrorName() string {
	return "GetLikeCountByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLikeCountByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLikeCountByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLikeCountByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLikeCountByPostReqValidationError{}

// Validate checks the field values on GetLikeCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLikeCountByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLikeCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLikeCountByPostResponseMultiError, or nil if none found.
func (m *GetLikeCountByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLikeCountByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetLikeCountByPostResponseMultiError(errors)
	}

	return nil
}

// GetLikeCountByPostResponseMultiError is an error wrapping multiple
// validation errors returned by GetLikeCountByPostResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLikeCountByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLikeCountByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLikeCountByPostResponseMultiError) AllErrors() []error { return m }

// GetLikeCountByPostResponseValidationError is the validation error returned
// by GetLikeCountByPostResponse.Validate if the designated constraints aren't met.
type GetLikeCountByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLikeCountByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLikeCountByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLikeCountByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLikeCountByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLikeCountByPostResponseValidationError) ErrorName() string {
	return "GetLikeCountByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLikeCountByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLikeCountByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLikeCountByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLikeCountByPostResponseValidationError{}

// Validate checks the field values on AddFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFavorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFavorReqMultiError, or
// nil if none found.
func (m *AddFavorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFavorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddFavorReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddFavorReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFavorReqMultiError(errors)
	}

	return nil
}

// AddFavorReqMultiError is an error wrapping multiple validation errors
// returned by AddFavorReq.ValidateAll() if the designated constraints aren't met.
type AddFavorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFavorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFavorReqMultiError) AllErrors() []error { return m }

// AddFavorReqValidationError is the validation error returned by
// AddFavorReq.Validate if the designated constraints aren't met.
type AddFavorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFavorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFavorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFavorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFavorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFavorReqValidationError) ErrorName() string { return "AddFavorReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFavorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFavorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFavorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFavorReqValidationError{}

// Validate checks the field values on CancelFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelFavorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFavorReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelFavorReqMultiError,
// or nil if none found.
func (m *CancelFavorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFavorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelFavorReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelFavorReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelFavorReqMultiError(errors)
	}

	return nil
}

// CancelFavorReqMultiError is an error wrapping multiple validation errors
// returned by CancelFavorReq.ValidateAll() if the designated constraints
// aren't met.
type CancelFavorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFavorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFavorReqMultiError) AllErrors() []error { return m }

// CancelFavorReqValidationError is the validation error returned by
// CancelFavorReq.Validate if the designated constraints aren't met.
type CancelFavorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFavorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFavorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFavorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFavorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFavorReqValidationError) ErrorName() string { return "CancelFavorReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelFavorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFavorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFavorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFavorReqValidationError{}

// Validate checks the field values on IsFavorReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsFavorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsFavorReqMultiError, or
// nil if none found.
func (m *IsFavorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsFavorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := IsFavorReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := IsFavorReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsFavorReqMultiError(errors)
	}

	return nil
}

// IsFavorReqMultiError is an error wrapping multiple validation errors
// returned by IsFavorReq.ValidateAll() if the designated constraints aren't met.
type IsFavorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsFavorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsFavorReqMultiError) AllErrors() []error { return m }

// IsFavorReqValidationError is the validation error returned by
// IsFavorReq.Validate if the designated constraints aren't met.
type IsFavorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsFavorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsFavorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsFavorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsFavorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsFavorReqValidationError) ErrorName() string { return "IsFavorReqValidationError" }

// Error satisfies the builtin error interface
func (e IsFavorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsFavorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsFavorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsFavorReqValidationError{}

// Validate checks the field values on ListFavorByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFavorByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavorByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavorByPostReqMultiError, or nil if none found.
func (m *ListFavorByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavorByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := ListFavorByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFavorByPostReqMultiError(errors)
	}

	return nil
}

// ListFavorByPostReqMultiError is an error wrapping multiple validation errors
// returned by ListFavorByPostReq.ValidateAll() if the designated constraints
// aren't met.
type ListFavorByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavorByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavorByPostReqMultiError) AllErrors() []error { return m }

// ListFavorByPostReqValidationError is the validation error returned by
// ListFavorByPostReq.Validate if the designated constraints aren't met.
type ListFavorByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavorByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavorByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavorByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavorByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavorByPostReqValidationError) ErrorName() string {
	return "ListFavorByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavorByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavorByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavorByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavorByPostReqValidationError{}

// Validate checks the field values on ListFavorByPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFavorByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavorByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavorByPostResponseMultiError, or nil if none found.
func (m *ListFavorByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavorByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFavors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFavorByPostResponseValidationError{
						field:  fmt.Sprintf("Favors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFavorByPostResponseValidationError{
						field:  fmt.Sprintf("Favors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFavorByPostResponseValidationError{
					field:  fmt.Sprintf("Favors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFavorByPostResponseMultiError(errors)
	}

	return nil
}

// ListFavorByPostResponseMultiError is an error wrapping multiple validation
// errors returned by ListFavorByPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFavorByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavorByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavorByPostResponseMultiError) AllErrors() []error { return m }

// ListFavorByPostResponseValidationError is the validation error returned by
// ListFavorByPostResponse.Validate if the designated constraints aren't met.
type ListFavorByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavorByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavorByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavorByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavorByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavorByPostResponseValidationError) ErrorName() string {
	return "ListFavorByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavorByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavorByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavorByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavorByPostResponseValidationError{}

// Validate checks the field values on ListFavorByUidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFavorByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavorByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavorByUidReqMultiError, or nil if none found.
func (m *ListFavorByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavorByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListFavorByUidReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFavorByUidReqMultiError(errors)
	}

	return nil
}

// ListFavorByUidReqMultiError is an error wrapping multiple validation errors
// returned by ListFavorByUidReq.ValidateAll() if the designated constraints
// aren't met.
type ListFavorByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavorByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavorByUidReqMultiError) AllErrors() []error { return m }

// ListFavorByUidReqValidationError is the validation error returned by
// ListFavorByUidReq.Validate if the designated constraints aren't met.
type ListFavorByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavorByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavorByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavorByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavorByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavorByUidReqValidationError) ErrorName() string {
	return "ListFavorByUidReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavorByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavorByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavorByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavorByUidReqValidationError{}

// Validate checks the field values on ListFavorByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFavorByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFavorByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFavorByUidResponseMultiError, or nil if none found.
func (m *ListFavorByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFavorByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFavors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFavorByUidResponseValidationError{
						field:  fmt.Sprintf("Favors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFavorByUidResponseValidationError{
						field:  fmt.Sprintf("Favors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFavorByUidResponseValidationError{
					field:  fmt.Sprintf("Favors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListFavorByUidResponseMultiError(errors)
	}

	return nil
}

// ListFavorByUidResponseMultiError is an error wrapping multiple validation
// errors returned by ListFavorByUidResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFavorByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFavorByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFavorByUidResponseMultiError) AllErrors() []error { return m }

// ListFavorByUidResponseValidationError is the validation error returned by
// ListFavorByUidResponse.Validate if the designated constraints aren't met.
type ListFavorByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFavorByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFavorByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFavorByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFavorByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFavorByUidResponseValidationError) ErrorName() string {
	return "ListFavorByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFavorByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFavorByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFavorByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFavorByUidResponseValidationError{}

// Validate checks the field values on GetFavorCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavorCountByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavorCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavorCountByPostReqMultiError, or nil if none found.
func (m *GetFavorCountByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavorCountByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := GetFavorCountByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFavorCountByPostReqMultiError(errors)
	}

	return nil
}

// GetFavorCountByPostReqMultiError is an error wrapping multiple validation
// errors returned by GetFavorCountByPostReq.ValidateAll() if the designated
// constraints aren't met.
type GetFavorCountByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavorCountByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavorCountByPostReqMultiError) AllErrors() []error { return m }

// GetFavorCountByPostReqValidationError is the validation error returned by
// GetFavorCountByPostReq.Validate if the designated constraints aren't met.
type GetFavorCountByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavorCountByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavorCountByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavorCountByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavorCountByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavorCountByPostReqValidationError) ErrorName() string {
	return "GetFavorCountByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavorCountByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavorCountByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavorCountByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavorCountByPostReqValidationError{}

// Validate checks the field values on GetFavorCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavorCountByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavorCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavorCountByPostResponseMultiError, or nil if none found.
func (m *GetFavorCountByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavorCountByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetFavorCountByPostResponseMultiError(errors)
	}

	return nil
}

// GetFavorCountByPostResponseMultiError is an error wrapping multiple
// validation errors returned by GetFavorCountByPostResponse.ValidateAll() if
// the designated constraints aren't met.
type GetFavorCountByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavorCountByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavorCountByPostResponseMultiError) AllErrors() []error { return m }

// GetFavorCountByPostResponseValidationError is the validation error returned
// by GetFavorCountByPostResponse.Validate if the designated constraints
// aren't met.
type GetFavorCountByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavorCountByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavorCountByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavorCountByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavorCountByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavorCountByPostResponseValidationError) ErrorName() string {
	return "GetFavorCountByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavorCountByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavorCountByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavorCountByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavorCountByPostResponseValidationError{}

// Validate checks the field values on AddShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddShareReqMultiError, or
// nil if none found.
func (m *AddShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddShareReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddShareReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddShareReqMultiError(errors)
	}

	return nil
}

// AddShareReqMultiError is an error wrapping multiple validation errors
// returned by AddShareReq.ValidateAll() if the designated constraints aren't met.
type AddShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareReqMultiError) AllErrors() []error { return m }

// AddShareReqValidationError is the validation error returned by
// AddShareReq.Validate if the designated constraints aren't met.
type AddShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareReqValidationError) ErrorName() string { return "AddShareReqValidationError" }

// Error satisfies the builtin error interface
func (e AddShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareReqValidationError{}

// Validate checks the field values on CancelShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelShareReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelShareReqMultiError,
// or nil if none found.
func (m *CancelShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelShareReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelShareReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelShareReqMultiError(errors)
	}

	return nil
}

// CancelShareReqMultiError is an error wrapping multiple validation errors
// returned by CancelShareReq.ValidateAll() if the designated constraints
// aren't met.
type CancelShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelShareReqMultiError) AllErrors() []error { return m }

// CancelShareReqValidationError is the validation error returned by
// CancelShareReq.Validate if the designated constraints aren't met.
type CancelShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelShareReqValidationError) ErrorName() string { return "CancelShareReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelShareReqValidationError{}

// Validate checks the field values on IsShareReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IsShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IsShareReqMultiError, or
// nil if none found.
func (m *IsShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *IsShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := IsShareReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := IsShareReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsShareReqMultiError(errors)
	}

	return nil
}

// IsShareReqMultiError is an error wrapping multiple validation errors
// returned by IsShareReq.ValidateAll() if the designated constraints aren't met.
type IsShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsShareReqMultiError) AllErrors() []error { return m }

// IsShareReqValidationError is the validation error returned by
// IsShareReq.Validate if the designated constraints aren't met.
type IsShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsShareReqValidationError) ErrorName() string { return "IsShareReqValidationError" }

// Error satisfies the builtin error interface
func (e IsShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsShareReqValidationError{}

// Validate checks the field values on ListShareByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShareByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareByPostReqMultiError, or nil if none found.
func (m *ListShareByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := ListShareByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShareByPostReqMultiError(errors)
	}

	return nil
}

// ListShareByPostReqMultiError is an error wrapping multiple validation errors
// returned by ListShareByPostReq.ValidateAll() if the designated constraints
// aren't met.
type ListShareByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareByPostReqMultiError) AllErrors() []error { return m }

// ListShareByPostReqValidationError is the validation error returned by
// ListShareByPostReq.Validate if the designated constraints aren't met.
type ListShareByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareByPostReqValidationError) ErrorName() string {
	return "ListShareByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareByPostReqValidationError{}

// Validate checks the field values on ListShareByPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShareByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareByPostResponseMultiError, or nil if none found.
func (m *ListShareByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShareByPostResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShareByPostResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShareByPostResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListShareByPostResponseMultiError(errors)
	}

	return nil
}

// ListShareByPostResponseMultiError is an error wrapping multiple validation
// errors returned by ListShareByPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListShareByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareByPostResponseMultiError) AllErrors() []error { return m }

// ListShareByPostResponseValidationError is the validation error returned by
// ListShareByPostResponse.Validate if the designated constraints aren't met.
type ListShareByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareByPostResponseValidationError) ErrorName() string {
	return "ListShareByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareByPostResponseValidationError{}

// Validate checks the field values on ListShareByUidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListShareByUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareByUidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareByUidReqMultiError, or nil if none found.
func (m *ListShareByUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareByUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUid() <= 0 {
		err := ListShareByUidReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShareByUidReqMultiError(errors)
	}

	return nil
}

// ListShareByUidReqMultiError is an error wrapping multiple validation errors
// returned by ListShareByUidReq.ValidateAll() if the designated constraints
// aren't met.
type ListShareByUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareByUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareByUidReqMultiError) AllErrors() []error { return m }

// ListShareByUidReqValidationError is the validation error returned by
// ListShareByUidReq.Validate if the designated constraints aren't met.
type ListShareByUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareByUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareByUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareByUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareByUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareByUidReqValidationError) ErrorName() string {
	return "ListShareByUidReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareByUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareByUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareByUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareByUidReqValidationError{}

// Validate checks the field values on ListShareByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShareByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShareByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShareByUidResponseMultiError, or nil if none found.
func (m *ListShareByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShareByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShares() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShareByUidResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShareByUidResponseValidationError{
						field:  fmt.Sprintf("Shares[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShareByUidResponseValidationError{
					field:  fmt.Sprintf("Shares[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListShareByUidResponseMultiError(errors)
	}

	return nil
}

// ListShareByUidResponseMultiError is an error wrapping multiple validation
// errors returned by ListShareByUidResponse.ValidateAll() if the designated
// constraints aren't met.
type ListShareByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShareByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShareByUidResponseMultiError) AllErrors() []error { return m }

// ListShareByUidResponseValidationError is the validation error returned by
// ListShareByUidResponse.Validate if the designated constraints aren't met.
type ListShareByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShareByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShareByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShareByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShareByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShareByUidResponseValidationError) ErrorName() string {
	return "ListShareByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShareByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShareByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShareByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShareByUidResponseValidationError{}

// Validate checks the field values on GetShareCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShareCountByPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareCountByPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareCountByPostReqMultiError, or nil if none found.
func (m *GetShareCountByPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareCountByPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := GetShareCountByPostReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShareCountByPostReqMultiError(errors)
	}

	return nil
}

// GetShareCountByPostReqMultiError is an error wrapping multiple validation
// errors returned by GetShareCountByPostReq.ValidateAll() if the designated
// constraints aren't met.
type GetShareCountByPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareCountByPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareCountByPostReqMultiError) AllErrors() []error { return m }

// GetShareCountByPostReqValidationError is the validation error returned by
// GetShareCountByPostReq.Validate if the designated constraints aren't met.
type GetShareCountByPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareCountByPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareCountByPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareCountByPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareCountByPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareCountByPostReqValidationError) ErrorName() string {
	return "GetShareCountByPostReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetShareCountByPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareCountByPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareCountByPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareCountByPostReqValidationError{}

// Validate checks the field values on GetShareCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShareCountByPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShareCountByPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShareCountByPostResponseMultiError, or nil if none found.
func (m *GetShareCountByPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShareCountByPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetShareCountByPostResponseMultiError(errors)
	}

	return nil
}

// GetShareCountByPostResponseMultiError is an error wrapping multiple
// validation errors returned by GetShareCountByPostResponse.ValidateAll() if
// the designated constraints aren't met.
type GetShareCountByPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShareCountByPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShareCountByPostResponseMultiError) AllErrors() []error { return m }

// GetShareCountByPostResponseValidationError is the validation error returned
// by GetShareCountByPostResponse.Validate if the designated constraints
// aren't met.
type GetShareCountByPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShareCountByPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShareCountByPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShareCountByPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShareCountByPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShareCountByPostResponseValidationError) ErrorName() string {
	return "GetShareCountByPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShareCountByPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShareCountByPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShareCountByPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShareCountByPostResponseValidationError{}
