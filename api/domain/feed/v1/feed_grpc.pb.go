// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package domainfeedv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "redbook/api/redbookpb/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedRpcClient is the client API for FeedRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedRpcClient interface {
	CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*GetPostResponse, error)
	ListPostCard(ctx context.Context, in *ListPostCardReq, opts ...grpc.CallOption) (*ListPostCardResponse, error)
	ListPostCardByIds(ctx context.Context, in *ListPostCardByIdsReq, opts ...grpc.CallOption) (*ListPostCardByIdsResponse, error)
	ListPostCardByUid(ctx context.Context, in *ListPostCardByUidReq, opts ...grpc.CallOption) (*ListPostCardByUidResponse, error)
	ListTimelinePostCardWithTimestamp(ctx context.Context, in *ListTimelinePostCardWithTimestampReq, opts ...grpc.CallOption) (*ListTimelinePostCardWithTimestampResponse, error)
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	// rpc GetPostStat(GetPostStatReq) returns (GetPostStatResponse);
	ListVideoPost(ctx context.Context, in *ListVideoPostReq, opts ...grpc.CallOption) (*ListVideoPostResponse, error)
	AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	ListFollower(ctx context.Context, in *ListFollowerReq, opts ...grpc.CallOption) (*ListFollowerResponse, error)
	ListFollowee(ctx context.Context, in *ListFolloweeReq, opts ...grpc.CallOption) (*ListFolloweeResponse, error)
	AddLike(ctx context.Context, in *AddLikeReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	IsLike(ctx context.Context, in *IsLikeReq, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	ListLikeByPost(ctx context.Context, in *ListLikeByPostReq, opts ...grpc.CallOption) (*ListLikeByPostResponse, error)
	ListLikeByUid(ctx context.Context, in *ListLikeByUidReq, opts ...grpc.CallOption) (*ListLikeByUidResponse, error)
	GetLikeCountByPost(ctx context.Context, in *GetLikeCountByPostReq, opts ...grpc.CallOption) (*GetLikeCountByPostResponse, error)
	AddFavor(ctx context.Context, in *AddFavorReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	CancelFavor(ctx context.Context, in *CancelFavorReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	IsFavor(ctx context.Context, in *IsFavorReq, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	ListFavorByPost(ctx context.Context, in *ListFavorByPostReq, opts ...grpc.CallOption) (*ListFavorByPostResponse, error)
	ListFavorByUid(ctx context.Context, in *ListFavorByUidReq, opts ...grpc.CallOption) (*ListFavorByUidResponse, error)
	GetFavorCountByPost(ctx context.Context, in *GetFavorCountByPostReq, opts ...grpc.CallOption) (*GetFavorCountByPostResponse, error)
	AddShare(ctx context.Context, in *AddShareReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	CancelShare(ctx context.Context, in *CancelShareReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	IsShare(ctx context.Context, in *IsShareReq, opts ...grpc.CallOption) (*v1.BoolResponse, error)
	ListShareByPost(ctx context.Context, in *ListShareByPostReq, opts ...grpc.CallOption) (*ListShareByPostResponse, error)
	ListShareByUid(ctx context.Context, in *ListShareByUidReq, opts ...grpc.CallOption) (*ListShareByUidResponse, error)
	GetShareCountByPost(ctx context.Context, in *GetShareCountByPostReq, opts ...grpc.CallOption) (*GetShareCountByPostResponse, error)
}

type feedRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedRpcClient(cc grpc.ClientConnInterface) FeedRpcClient {
	return &feedRpcClient{cc}
}

func (c *feedRpcClient) CreatePost(ctx context.Context, in *CreatePostReq, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) UpdatePost(ctx context.Context, in *UpdatePostReq, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) GetPost(ctx context.Context, in *GetPostReq, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListPostCard(ctx context.Context, in *ListPostCardReq, opts ...grpc.CallOption) (*ListPostCardResponse, error) {
	out := new(ListPostCardResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListPostCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListPostCardByIds(ctx context.Context, in *ListPostCardByIdsReq, opts ...grpc.CallOption) (*ListPostCardByIdsResponse, error) {
	out := new(ListPostCardByIdsResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListPostCardByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListPostCardByUid(ctx context.Context, in *ListPostCardByUidReq, opts ...grpc.CallOption) (*ListPostCardByUidResponse, error) {
	out := new(ListPostCardByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListPostCardByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListTimelinePostCardWithTimestamp(ctx context.Context, in *ListTimelinePostCardWithTimestampReq, opts ...grpc.CallOption) (*ListTimelinePostCardWithTimestampResponse, error) {
	out := new(ListTimelinePostCardWithTimestampResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListTimelinePostCardWithTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListVideoPost(ctx context.Context, in *ListVideoPostReq, opts ...grpc.CallOption) (*ListVideoPostResponse, error) {
	out := new(ListVideoPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListVideoPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) AddFollow(ctx context.Context, in *AddFollowReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/AddFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/CancelFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) IsFollow(ctx context.Context, in *IsFollowReq, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/IsFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListFollower(ctx context.Context, in *ListFollowerReq, opts ...grpc.CallOption) (*ListFollowerResponse, error) {
	out := new(ListFollowerResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListFollowee(ctx context.Context, in *ListFolloweeReq, opts ...grpc.CallOption) (*ListFolloweeResponse, error) {
	out := new(ListFolloweeResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListFollowee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) AddLike(ctx context.Context, in *AddLikeReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/CancelLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) IsLike(ctx context.Context, in *IsLikeReq, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/IsLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListLikeByPost(ctx context.Context, in *ListLikeByPostReq, opts ...grpc.CallOption) (*ListLikeByPostResponse, error) {
	out := new(ListLikeByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListLikeByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListLikeByUid(ctx context.Context, in *ListLikeByUidReq, opts ...grpc.CallOption) (*ListLikeByUidResponse, error) {
	out := new(ListLikeByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListLikeByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) GetLikeCountByPost(ctx context.Context, in *GetLikeCountByPostReq, opts ...grpc.CallOption) (*GetLikeCountByPostResponse, error) {
	out := new(GetLikeCountByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/GetLikeCountByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) AddFavor(ctx context.Context, in *AddFavorReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/AddFavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) CancelFavor(ctx context.Context, in *CancelFavorReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/CancelFavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) IsFavor(ctx context.Context, in *IsFavorReq, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/IsFavor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListFavorByPost(ctx context.Context, in *ListFavorByPostReq, opts ...grpc.CallOption) (*ListFavorByPostResponse, error) {
	out := new(ListFavorByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListFavorByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListFavorByUid(ctx context.Context, in *ListFavorByUidReq, opts ...grpc.CallOption) (*ListFavorByUidResponse, error) {
	out := new(ListFavorByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListFavorByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) GetFavorCountByPost(ctx context.Context, in *GetFavorCountByPostReq, opts ...grpc.CallOption) (*GetFavorCountByPostResponse, error) {
	out := new(GetFavorCountByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/GetFavorCountByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) AddShare(ctx context.Context, in *AddShareReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/AddShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) CancelShare(ctx context.Context, in *CancelShareReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/CancelShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) IsShare(ctx context.Context, in *IsShareReq, opts ...grpc.CallOption) (*v1.BoolResponse, error) {
	out := new(v1.BoolResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/IsShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListShareByPost(ctx context.Context, in *ListShareByPostReq, opts ...grpc.CallOption) (*ListShareByPostResponse, error) {
	out := new(ListShareByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListShareByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) ListShareByUid(ctx context.Context, in *ListShareByUidReq, opts ...grpc.CallOption) (*ListShareByUidResponse, error) {
	out := new(ListShareByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/ListShareByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedRpcClient) GetShareCountByPost(ctx context.Context, in *GetShareCountByPostReq, opts ...grpc.CallOption) (*GetShareCountByPostResponse, error) {
	out := new(GetShareCountByPostResponse)
	err := c.cc.Invoke(ctx, "/domain.feed.v1.FeedRpc/GetShareCountByPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedRpcServer is the server API for FeedRpc service.
// All implementations must embed UnimplementedFeedRpcServer
// for forward compatibility
type FeedRpcServer interface {
	CreatePost(context.Context, *CreatePostReq) (*CreatePostResponse, error)
	UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResponse, error)
	GetPost(context.Context, *GetPostReq) (*GetPostResponse, error)
	ListPostCard(context.Context, *ListPostCardReq) (*ListPostCardResponse, error)
	ListPostCardByIds(context.Context, *ListPostCardByIdsReq) (*ListPostCardByIdsResponse, error)
	ListPostCardByUid(context.Context, *ListPostCardByUidReq) (*ListPostCardByUidResponse, error)
	ListTimelinePostCardWithTimestamp(context.Context, *ListTimelinePostCardWithTimestampReq) (*ListTimelinePostCardWithTimestampResponse, error)
	DeletePost(context.Context, *DeletePostReq) (*v1.EmptyResponse, error)
	// rpc GetPostStat(GetPostStatReq) returns (GetPostStatResponse);
	ListVideoPost(context.Context, *ListVideoPostReq) (*ListVideoPostResponse, error)
	AddFollow(context.Context, *AddFollowReq) (*v1.EmptyResponse, error)
	CancelFollow(context.Context, *CancelFollowReq) (*v1.EmptyResponse, error)
	IsFollow(context.Context, *IsFollowReq) (*v1.BoolResponse, error)
	ListFollower(context.Context, *ListFollowerReq) (*ListFollowerResponse, error)
	ListFollowee(context.Context, *ListFolloweeReq) (*ListFolloweeResponse, error)
	AddLike(context.Context, *AddLikeReq) (*v1.EmptyResponse, error)
	CancelLike(context.Context, *CancelLikeReq) (*v1.EmptyResponse, error)
	IsLike(context.Context, *IsLikeReq) (*v1.BoolResponse, error)
	ListLikeByPost(context.Context, *ListLikeByPostReq) (*ListLikeByPostResponse, error)
	ListLikeByUid(context.Context, *ListLikeByUidReq) (*ListLikeByUidResponse, error)
	GetLikeCountByPost(context.Context, *GetLikeCountByPostReq) (*GetLikeCountByPostResponse, error)
	AddFavor(context.Context, *AddFavorReq) (*v1.EmptyResponse, error)
	CancelFavor(context.Context, *CancelFavorReq) (*v1.EmptyResponse, error)
	IsFavor(context.Context, *IsFavorReq) (*v1.BoolResponse, error)
	ListFavorByPost(context.Context, *ListFavorByPostReq) (*ListFavorByPostResponse, error)
	ListFavorByUid(context.Context, *ListFavorByUidReq) (*ListFavorByUidResponse, error)
	GetFavorCountByPost(context.Context, *GetFavorCountByPostReq) (*GetFavorCountByPostResponse, error)
	AddShare(context.Context, *AddShareReq) (*v1.EmptyResponse, error)
	CancelShare(context.Context, *CancelShareReq) (*v1.EmptyResponse, error)
	IsShare(context.Context, *IsShareReq) (*v1.BoolResponse, error)
	ListShareByPost(context.Context, *ListShareByPostReq) (*ListShareByPostResponse, error)
	ListShareByUid(context.Context, *ListShareByUidReq) (*ListShareByUidResponse, error)
	GetShareCountByPost(context.Context, *GetShareCountByPostReq) (*GetShareCountByPostResponse, error)
	mustEmbedUnimplementedFeedRpcServer()
}

// UnimplementedFeedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFeedRpcServer struct {
}

func (UnimplementedFeedRpcServer) CreatePost(context.Context, *CreatePostReq) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedFeedRpcServer) UpdatePost(context.Context, *UpdatePostReq) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedFeedRpcServer) GetPost(context.Context, *GetPostReq) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedFeedRpcServer) ListPostCard(context.Context, *ListPostCardReq) (*ListPostCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostCard not implemented")
}
func (UnimplementedFeedRpcServer) ListPostCardByIds(context.Context, *ListPostCardByIdsReq) (*ListPostCardByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostCardByIds not implemented")
}
func (UnimplementedFeedRpcServer) ListPostCardByUid(context.Context, *ListPostCardByUidReq) (*ListPostCardByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPostCardByUid not implemented")
}
func (UnimplementedFeedRpcServer) ListTimelinePostCardWithTimestamp(context.Context, *ListTimelinePostCardWithTimestampReq) (*ListTimelinePostCardWithTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimelinePostCardWithTimestamp not implemented")
}
func (UnimplementedFeedRpcServer) DeletePost(context.Context, *DeletePostReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedFeedRpcServer) ListVideoPost(context.Context, *ListVideoPostReq) (*ListVideoPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideoPost not implemented")
}
func (UnimplementedFeedRpcServer) AddFollow(context.Context, *AddFollowReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (UnimplementedFeedRpcServer) CancelFollow(context.Context, *CancelFollowReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFollow not implemented")
}
func (UnimplementedFeedRpcServer) IsFollow(context.Context, *IsFollowReq) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollow not implemented")
}
func (UnimplementedFeedRpcServer) ListFollower(context.Context, *ListFollowerReq) (*ListFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollower not implemented")
}
func (UnimplementedFeedRpcServer) ListFollowee(context.Context, *ListFolloweeReq) (*ListFolloweeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowee not implemented")
}
func (UnimplementedFeedRpcServer) AddLike(context.Context, *AddLikeReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedFeedRpcServer) CancelLike(context.Context, *CancelLikeReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedFeedRpcServer) IsLike(context.Context, *IsLikeReq) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLike not implemented")
}
func (UnimplementedFeedRpcServer) ListLikeByPost(context.Context, *ListLikeByPostReq) (*ListLikeByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikeByPost not implemented")
}
func (UnimplementedFeedRpcServer) ListLikeByUid(context.Context, *ListLikeByUidReq) (*ListLikeByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikeByUid not implemented")
}
func (UnimplementedFeedRpcServer) GetLikeCountByPost(context.Context, *GetLikeCountByPostReq) (*GetLikeCountByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeCountByPost not implemented")
}
func (UnimplementedFeedRpcServer) AddFavor(context.Context, *AddFavorReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFavor not implemented")
}
func (UnimplementedFeedRpcServer) CancelFavor(context.Context, *CancelFavorReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFavor not implemented")
}
func (UnimplementedFeedRpcServer) IsFavor(context.Context, *IsFavorReq) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavor not implemented")
}
func (UnimplementedFeedRpcServer) ListFavorByPost(context.Context, *ListFavorByPostReq) (*ListFavorByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorByPost not implemented")
}
func (UnimplementedFeedRpcServer) ListFavorByUid(context.Context, *ListFavorByUidReq) (*ListFavorByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFavorByUid not implemented")
}
func (UnimplementedFeedRpcServer) GetFavorCountByPost(context.Context, *GetFavorCountByPostReq) (*GetFavorCountByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorCountByPost not implemented")
}
func (UnimplementedFeedRpcServer) AddShare(context.Context, *AddShareReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShare not implemented")
}
func (UnimplementedFeedRpcServer) CancelShare(context.Context, *CancelShareReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelShare not implemented")
}
func (UnimplementedFeedRpcServer) IsShare(context.Context, *IsShareReq) (*v1.BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsShare not implemented")
}
func (UnimplementedFeedRpcServer) ListShareByPost(context.Context, *ListShareByPostReq) (*ListShareByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShareByPost not implemented")
}
func (UnimplementedFeedRpcServer) ListShareByUid(context.Context, *ListShareByUidReq) (*ListShareByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShareByUid not implemented")
}
func (UnimplementedFeedRpcServer) GetShareCountByPost(context.Context, *GetShareCountByPostReq) (*GetShareCountByPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareCountByPost not implemented")
}
func (UnimplementedFeedRpcServer) mustEmbedUnimplementedFeedRpcServer() {}

// UnsafeFeedRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedRpcServer will
// result in compilation errors.
type UnsafeFeedRpcServer interface {
	mustEmbedUnimplementedFeedRpcServer()
}

func RegisterFeedRpcServer(s grpc.ServiceRegistrar, srv FeedRpcServer) {
	s.RegisterService(&FeedRpc_ServiceDesc, srv)
}

func _FeedRpc_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).CreatePost(ctx, req.(*CreatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).UpdatePost(ctx, req.(*UpdatePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).GetPost(ctx, req.(*GetPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListPostCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListPostCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListPostCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListPostCard(ctx, req.(*ListPostCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListPostCardByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostCardByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListPostCardByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListPostCardByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListPostCardByIds(ctx, req.(*ListPostCardByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListPostCardByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostCardByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListPostCardByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListPostCardByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListPostCardByUid(ctx, req.(*ListPostCardByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListTimelinePostCardWithTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimelinePostCardWithTimestampReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListTimelinePostCardWithTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListTimelinePostCardWithTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListTimelinePostCardWithTimestamp(ctx, req.(*ListTimelinePostCardWithTimestampReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListVideoPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListVideoPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListVideoPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListVideoPost(ctx, req.(*ListVideoPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/AddFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).AddFollow(ctx, req.(*AddFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_CancelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).CancelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/CancelFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).CancelFollow(ctx, req.(*CancelFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_IsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).IsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/IsFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).IsFollow(ctx, req.(*IsFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListFollower(ctx, req.(*ListFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListFollowee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFolloweeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListFollowee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListFollowee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListFollowee(ctx, req.(*ListFolloweeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).AddLike(ctx, req.(*AddLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/CancelLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).CancelLike(ctx, req.(*CancelLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/IsLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).IsLike(ctx, req.(*IsLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListLikeByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikeByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListLikeByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListLikeByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListLikeByPost(ctx, req.(*ListLikeByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListLikeByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikeByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListLikeByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListLikeByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListLikeByUid(ctx, req.(*ListLikeByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_GetLikeCountByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeCountByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).GetLikeCountByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/GetLikeCountByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).GetLikeCountByPost(ctx, req.(*GetLikeCountByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_AddFavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).AddFavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/AddFavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).AddFavor(ctx, req.(*AddFavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_CancelFavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).CancelFavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/CancelFavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).CancelFavor(ctx, req.(*CancelFavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_IsFavor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFavorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).IsFavor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/IsFavor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).IsFavor(ctx, req.(*IsFavorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListFavorByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavorByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListFavorByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListFavorByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListFavorByPost(ctx, req.(*ListFavorByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListFavorByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFavorByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListFavorByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListFavorByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListFavorByUid(ctx, req.(*ListFavorByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_GetFavorCountByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavorCountByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).GetFavorCountByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/GetFavorCountByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).GetFavorCountByPost(ctx, req.(*GetFavorCountByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_AddShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).AddShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/AddShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).AddShare(ctx, req.(*AddShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_CancelShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).CancelShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/CancelShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).CancelShare(ctx, req.(*CancelShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_IsShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsShareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).IsShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/IsShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).IsShare(ctx, req.(*IsShareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListShareByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShareByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListShareByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListShareByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListShareByPost(ctx, req.(*ListShareByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_ListShareByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShareByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).ListShareByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/ListShareByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).ListShareByUid(ctx, req.(*ListShareByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedRpc_GetShareCountByPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareCountByPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).GetShareCountByPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.feed.v1.FeedRpc/GetShareCountByPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).GetShareCountByPost(ctx, req.(*GetShareCountByPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedRpc_ServiceDesc is the grpc.ServiceDesc for FeedRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.feed.v1.FeedRpc",
	HandlerType: (*FeedRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _FeedRpc_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _FeedRpc_UpdatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _FeedRpc_GetPost_Handler,
		},
		{
			MethodName: "ListPostCard",
			Handler:    _FeedRpc_ListPostCard_Handler,
		},
		{
			MethodName: "ListPostCardByIds",
			Handler:    _FeedRpc_ListPostCardByIds_Handler,
		},
		{
			MethodName: "ListPostCardByUid",
			Handler:    _FeedRpc_ListPostCardByUid_Handler,
		},
		{
			MethodName: "ListTimelinePostCardWithTimestamp",
			Handler:    _FeedRpc_ListTimelinePostCardWithTimestamp_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _FeedRpc_DeletePost_Handler,
		},
		{
			MethodName: "ListVideoPost",
			Handler:    _FeedRpc_ListVideoPost_Handler,
		},
		{
			MethodName: "AddFollow",
			Handler:    _FeedRpc_AddFollow_Handler,
		},
		{
			MethodName: "CancelFollow",
			Handler:    _FeedRpc_CancelFollow_Handler,
		},
		{
			MethodName: "IsFollow",
			Handler:    _FeedRpc_IsFollow_Handler,
		},
		{
			MethodName: "ListFollower",
			Handler:    _FeedRpc_ListFollower_Handler,
		},
		{
			MethodName: "ListFollowee",
			Handler:    _FeedRpc_ListFollowee_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _FeedRpc_AddLike_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _FeedRpc_CancelLike_Handler,
		},
		{
			MethodName: "IsLike",
			Handler:    _FeedRpc_IsLike_Handler,
		},
		{
			MethodName: "ListLikeByPost",
			Handler:    _FeedRpc_ListLikeByPost_Handler,
		},
		{
			MethodName: "ListLikeByUid",
			Handler:    _FeedRpc_ListLikeByUid_Handler,
		},
		{
			MethodName: "GetLikeCountByPost",
			Handler:    _FeedRpc_GetLikeCountByPost_Handler,
		},
		{
			MethodName: "AddFavor",
			Handler:    _FeedRpc_AddFavor_Handler,
		},
		{
			MethodName: "CancelFavor",
			Handler:    _FeedRpc_CancelFavor_Handler,
		},
		{
			MethodName: "IsFavor",
			Handler:    _FeedRpc_IsFavor_Handler,
		},
		{
			MethodName: "ListFavorByPost",
			Handler:    _FeedRpc_ListFavorByPost_Handler,
		},
		{
			MethodName: "ListFavorByUid",
			Handler:    _FeedRpc_ListFavorByUid_Handler,
		},
		{
			MethodName: "GetFavorCountByPost",
			Handler:    _FeedRpc_GetFavorCountByPost_Handler,
		},
		{
			MethodName: "AddShare",
			Handler:    _FeedRpc_AddShare_Handler,
		},
		{
			MethodName: "CancelShare",
			Handler:    _FeedRpc_CancelShare_Handler,
		},
		{
			MethodName: "IsShare",
			Handler:    _FeedRpc_IsShare_Handler,
		},
		{
			MethodName: "ListShareByPost",
			Handler:    _FeedRpc_ListShareByPost_Handler,
		},
		{
			MethodName: "ListShareByUid",
			Handler:    _FeedRpc_ListShareByUid_Handler,
		},
		{
			MethodName: "GetShareCountByPost",
			Handler:    _FeedRpc_GetShareCountByPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/feed/v1/feed.proto",
}
