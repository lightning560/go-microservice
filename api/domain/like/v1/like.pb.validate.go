// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: domain/like/v1/like.proto

package likev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LikeReqMultiError, or nil if none found.
func (m *LikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMid() <= 0 {
		err := LikeReqValidationError{
			field:  "Mid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return LikeReqMultiError(errors)
	}

	return nil
}

// LikeReqMultiError is an error wrapping multiple validation errors returned
// by LikeReq.ValidateAll() if the designated constraints aren't met.
type LikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeReqMultiError) AllErrors() []error { return m }

// LikeReqValidationError is the validation error returned by LikeReq.Validate
// if the designated constraints aren't met.
type LikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeReqValidationError) ErrorName() string { return "LikeReqValidationError" }

// Error satisfies the builtin error interface
func (e LikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeReqValidationError{}

// Validate checks the field values on LikeReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikeReplyMultiError, or nil
// if none found.
func (m *LikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	// no validation rules for Like

	// no validation rules for CreateAt

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return LikeReplyMultiError(errors)
	}

	return nil
}

// LikeReplyMultiError is an error wrapping multiple validation errors returned
// by LikeReply.ValidateAll() if the designated constraints aren't met.
type LikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikeReplyMultiError) AllErrors() []error { return m }

// LikeReplyValidationError is the validation error returned by
// LikeReply.Validate if the designated constraints aren't met.
type LikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeReplyValidationError) ErrorName() string { return "LikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeReplyValidationError{}

// Validate checks the field values on LikesReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikesReqMultiError, or nil
// if none found.
func (m *LikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLikesReq() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LikesReqValidationError{
						field:  fmt.Sprintf("LikesReq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LikesReqValidationError{
						field:  fmt.Sprintf("LikesReq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LikesReqValidationError{
					field:  fmt.Sprintf("LikesReq[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LikesReqMultiError(errors)
	}

	return nil
}

// LikesReqMultiError is an error wrapping multiple validation errors returned
// by LikesReq.ValidateAll() if the designated constraints aren't met.
type LikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikesReqMultiError) AllErrors() []error { return m }

// LikesReqValidationError is the validation error returned by
// LikesReq.Validate if the designated constraints aren't met.
type LikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikesReqValidationError) ErrorName() string { return "LikesReqValidationError" }

// Error satisfies the builtin error interface
func (e LikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikesReqValidationError{}

// Validate checks the field values on LikesReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LikesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LikesReplyMultiError, or
// nil if none found.
func (m *LikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLikesReply() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LikesReplyValidationError{
						field:  fmt.Sprintf("LikesReply[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LikesReplyValidationError{
						field:  fmt.Sprintf("LikesReply[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LikesReplyValidationError{
					field:  fmt.Sprintf("LikesReply[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LikesReplyMultiError(errors)
	}

	return nil
}

// LikesReplyMultiError is an error wrapping multiple validation errors
// returned by LikesReply.ValidateAll() if the designated constraints aren't met.
type LikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LikesReplyMultiError) AllErrors() []error { return m }

// LikesReplyValidationError is the validation error returned by
// LikesReply.Validate if the designated constraints aren't met.
type LikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikesReplyValidationError) ErrorName() string { return "LikesReplyValidationError" }

// Error satisfies the builtin error interface
func (e LikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikesReplyValidationError{}

// Validate checks the field values on SubjectLikesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubjectLikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectLikesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectLikesReqMultiError, or nil if none found.
func (m *SubjectLikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectLikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return SubjectLikesReqMultiError(errors)
	}

	return nil
}

// SubjectLikesReqMultiError is an error wrapping multiple validation errors
// returned by SubjectLikesReq.ValidateAll() if the designated constraints
// aren't met.
type SubjectLikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectLikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectLikesReqMultiError) AllErrors() []error { return m }

// SubjectLikesReqValidationError is the validation error returned by
// SubjectLikesReq.Validate if the designated constraints aren't met.
type SubjectLikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectLikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectLikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectLikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectLikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectLikesReqValidationError) ErrorName() string { return "SubjectLikesReqValidationError" }

// Error satisfies the builtin error interface
func (e SubjectLikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectLikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectLikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectLikesReqValidationError{}

// Validate checks the field values on SubjectLikesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubjectLikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectLikesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectLikesReplyMultiError, or nil if none found.
func (m *SubjectLikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectLikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectLikeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectLikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectLikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectLikesReplyValidationError{
					field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubjectLikesReplyMultiError(errors)
	}

	return nil
}

// SubjectLikesReplyMultiError is an error wrapping multiple validation errors
// returned by SubjectLikesReply.ValidateAll() if the designated constraints
// aren't met.
type SubjectLikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectLikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectLikesReplyMultiError) AllErrors() []error { return m }

// SubjectLikesReplyValidationError is the validation error returned by
// SubjectLikesReply.Validate if the designated constraints aren't met.
type SubjectLikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectLikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectLikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectLikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectLikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectLikesReplyValidationError) ErrorName() string {
	return "SubjectLikesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectLikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectLikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectLikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectLikesReplyValidationError{}

// Validate checks the field values on CountSubjectLikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountSubjectLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountSubjectLikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountSubjectLikeReqMultiError, or nil if none found.
func (m *CountSubjectLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountSubjectLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return CountSubjectLikeReqMultiError(errors)
	}

	return nil
}

// CountSubjectLikeReqMultiError is an error wrapping multiple validation
// errors returned by CountSubjectLikeReq.ValidateAll() if the designated
// constraints aren't met.
type CountSubjectLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountSubjectLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountSubjectLikeReqMultiError) AllErrors() []error { return m }

// CountSubjectLikeReqValidationError is the validation error returned by
// CountSubjectLikeReq.Validate if the designated constraints aren't met.
type CountSubjectLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountSubjectLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountSubjectLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountSubjectLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountSubjectLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountSubjectLikeReqValidationError) ErrorName() string {
	return "CountSubjectLikeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CountSubjectLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountSubjectLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountSubjectLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountSubjectLikeReqValidationError{}

// Validate checks the field values on CountSubjectLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountSubjectLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountSubjectLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountSubjectLikeReplyMultiError, or nil if none found.
func (m *CountSubjectLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountSubjectLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for Count

	if len(errors) > 0 {
		return CountSubjectLikeReplyMultiError(errors)
	}

	return nil
}

// CountSubjectLikeReplyMultiError is an error wrapping multiple validation
// errors returned by CountSubjectLikeReply.ValidateAll() if the designated
// constraints aren't met.
type CountSubjectLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountSubjectLikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountSubjectLikeReplyMultiError) AllErrors() []error { return m }

// CountSubjectLikeReplyValidationError is the validation error returned by
// CountSubjectLikeReply.Validate if the designated constraints aren't met.
type CountSubjectLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountSubjectLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountSubjectLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountSubjectLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountSubjectLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountSubjectLikeReplyValidationError) ErrorName() string {
	return "CountSubjectLikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountSubjectLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountSubjectLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountSubjectLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountSubjectLikeReplyValidationError{}

// Validate checks the field values on CountObjectLikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountObjectLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountObjectLikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountObjectLikeReqMultiError, or nil if none found.
func (m *CountObjectLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountObjectLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return CountObjectLikeReqMultiError(errors)
	}

	return nil
}

// CountObjectLikeReqMultiError is an error wrapping multiple validation errors
// returned by CountObjectLikeReq.ValidateAll() if the designated constraints
// aren't met.
type CountObjectLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountObjectLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountObjectLikeReqMultiError) AllErrors() []error { return m }

// CountObjectLikeReqValidationError is the validation error returned by
// CountObjectLikeReq.Validate if the designated constraints aren't met.
type CountObjectLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountObjectLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountObjectLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountObjectLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountObjectLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountObjectLikeReqValidationError) ErrorName() string {
	return "CountObjectLikeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CountObjectLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountObjectLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountObjectLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountObjectLikeReqValidationError{}

// Validate checks the field values on CountObjectLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountObjectLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountObjectLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountObjectLikeReplyMultiError, or nil if none found.
func (m *CountObjectLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountObjectLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Oid

	// no validation rules for Count

	if len(errors) > 0 {
		return CountObjectLikeReplyMultiError(errors)
	}

	return nil
}

// CountObjectLikeReplyMultiError is an error wrapping multiple validation
// errors returned by CountObjectLikeReply.ValidateAll() if the designated
// constraints aren't met.
type CountObjectLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountObjectLikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountObjectLikeReplyMultiError) AllErrors() []error { return m }

// CountObjectLikeReplyValidationError is the validation error returned by
// CountObjectLikeReply.Validate if the designated constraints aren't met.
type CountObjectLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountObjectLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountObjectLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountObjectLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountObjectLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountObjectLikeReplyValidationError) ErrorName() string {
	return "CountObjectLikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountObjectLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountObjectLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountObjectLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountObjectLikeReplyValidationError{}

// Validate checks the field values on CountUserLikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CountUserLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserLikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountUserLikeReqMultiError, or nil if none found.
func (m *CountUserLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return CountUserLikeReqMultiError(errors)
	}

	return nil
}

// CountUserLikeReqMultiError is an error wrapping multiple validation errors
// returned by CountUserLikeReq.ValidateAll() if the designated constraints
// aren't met.
type CountUserLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserLikeReqMultiError) AllErrors() []error { return m }

// CountUserLikeReqValidationError is the validation error returned by
// CountUserLikeReq.Validate if the designated constraints aren't met.
type CountUserLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserLikeReqValidationError) ErrorName() string { return "CountUserLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e CountUserLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserLikeReqValidationError{}

// Validate checks the field values on CountUserLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountUserLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountUserLikeReplyMultiError, or nil if none found.
func (m *CountUserLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Count

	if len(errors) > 0 {
		return CountUserLikeReplyMultiError(errors)
	}

	return nil
}

// CountUserLikeReplyMultiError is an error wrapping multiple validation errors
// returned by CountUserLikeReply.ValidateAll() if the designated constraints
// aren't met.
type CountUserLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserLikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserLikeReplyMultiError) AllErrors() []error { return m }

// CountUserLikeReplyValidationError is the validation error returned by
// CountUserLikeReply.Validate if the designated constraints aren't met.
type CountUserLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserLikeReplyValidationError) ErrorName() string {
	return "CountUserLikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserLikeReplyValidationError{}

// Validate checks the field values on UserLikesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLikesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLikesReqMultiError, or
// nil if none found.
func (m *UserLikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	if len(errors) > 0 {
		return UserLikesReqMultiError(errors)
	}

	return nil
}

// UserLikesReqMultiError is an error wrapping multiple validation errors
// returned by UserLikesReq.ValidateAll() if the designated constraints aren't met.
type UserLikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLikesReqMultiError) AllErrors() []error { return m }

// UserLikesReqValidationError is the validation error returned by
// UserLikesReq.Validate if the designated constraints aren't met.
type UserLikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLikesReqValidationError) ErrorName() string { return "UserLikesReqValidationError" }

// Error satisfies the builtin error interface
func (e UserLikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLikesReqValidationError{}

// Validate checks the field values on UserLikesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLikesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLikesReplyMultiError,
// or nil if none found.
func (m *UserLikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectLikeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserLikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserLikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserLikesReplyValidationError{
					field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserLikesReplyMultiError(errors)
	}

	return nil
}

// UserLikesReplyMultiError is an error wrapping multiple validation errors
// returned by UserLikesReply.ValidateAll() if the designated constraints
// aren't met.
type UserLikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLikesReplyMultiError) AllErrors() []error { return m }

// UserLikesReplyValidationError is the validation error returned by
// UserLikesReply.Validate if the designated constraints aren't met.
type UserLikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLikesReplyValidationError) ErrorName() string { return "UserLikesReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserLikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLikesReplyValidationError{}

// Validate checks the field values on AddLikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddLikeReqMultiError, or
// nil if none found.
func (m *AddLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMid() <= 0 {
		err := AddLikeReqValidationError{
			field:  "Mid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return AddLikeReqMultiError(errors)
	}

	return nil
}

// AddLikeReqMultiError is an error wrapping multiple validation errors
// returned by AddLikeReq.ValidateAll() if the designated constraints aren't met.
type AddLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeReqMultiError) AllErrors() []error { return m }

// AddLikeReqValidationError is the validation error returned by
// AddLikeReq.Validate if the designated constraints aren't met.
type AddLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeReqValidationError) ErrorName() string { return "AddLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeReqValidationError{}

// Validate checks the field values on AddLikeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddLikeReplyMultiError, or
// nil if none found.
func (m *AddLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddLikeReplyMultiError(errors)
	}

	return nil
}

// AddLikeReplyMultiError is an error wrapping multiple validation errors
// returned by AddLikeReply.ValidateAll() if the designated constraints aren't met.
type AddLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeReplyMultiError) AllErrors() []error { return m }

// AddLikeReplyValidationError is the validation error returned by
// AddLikeReply.Validate if the designated constraints aren't met.
type AddLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeReplyValidationError) ErrorName() string { return "AddLikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeReplyValidationError{}

// Validate checks the field values on CancelLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelLikeReqMultiError, or
// nil if none found.
func (m *CancelLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelLikeReqMultiError(errors)
	}

	return nil
}

// CancelLikeReqMultiError is an error wrapping multiple validation errors
// returned by CancelLikeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeReqMultiError) AllErrors() []error { return m }

// CancelLikeReqValidationError is the validation error returned by
// CancelLikeReq.Validate if the designated constraints aren't met.
type CancelLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeReqValidationError) ErrorName() string { return "CancelLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeReqValidationError{}

// Validate checks the field values on CancelLikeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelLikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelLikeReplyMultiError, or nil if none found.
func (m *CancelLikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelLikeReplyMultiError(errors)
	}

	return nil
}

// CancelLikeReplyMultiError is an error wrapping multiple validation errors
// returned by CancelLikeReply.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeReplyMultiError) AllErrors() []error { return m }

// CancelLikeReplyValidationError is the validation error returned by
// CancelLikeReply.Validate if the designated constraints aren't met.
type CancelLikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeReplyValidationError) ErrorName() string { return "CancelLikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e CancelLikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeReplyValidationError{}

// Validate checks the field values on DislikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DislikeReqMultiError, or
// nil if none found.
func (m *DislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMid() <= 0 {
		err := DislikeReqValidationError{
			field:  "Mid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return DislikeReqMultiError(errors)
	}

	return nil
}

// DislikeReqMultiError is an error wrapping multiple validation errors
// returned by DislikeReq.ValidateAll() if the designated constraints aren't met.
type DislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikeReqMultiError) AllErrors() []error { return m }

// DislikeReqValidationError is the validation error returned by
// DislikeReq.Validate if the designated constraints aren't met.
type DislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikeReqValidationError) ErrorName() string { return "DislikeReqValidationError" }

// Error satisfies the builtin error interface
func (e DislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikeReqValidationError{}

// Validate checks the field values on DislikeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DislikeReplyMultiError, or
// nil if none found.
func (m *DislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	// no validation rules for Dislike

	// no validation rules for CreateAt

	// no validation rules for UpdateAt

	if len(errors) > 0 {
		return DislikeReplyMultiError(errors)
	}

	return nil
}

// DislikeReplyMultiError is an error wrapping multiple validation errors
// returned by DislikeReply.ValidateAll() if the designated constraints aren't met.
type DislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikeReplyMultiError) AllErrors() []error { return m }

// DislikeReplyValidationError is the validation error returned by
// DislikeReply.Validate if the designated constraints aren't met.
type DislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikeReplyValidationError) ErrorName() string { return "DislikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e DislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikeReplyValidationError{}

// Validate checks the field values on DislikesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DislikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DislikesReqMultiError, or
// nil if none found.
func (m *DislikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDislikesReq() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DislikesReqValidationError{
						field:  fmt.Sprintf("DislikesReq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DislikesReqValidationError{
						field:  fmt.Sprintf("DislikesReq[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DislikesReqValidationError{
					field:  fmt.Sprintf("DislikesReq[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DislikesReqMultiError(errors)
	}

	return nil
}

// DislikesReqMultiError is an error wrapping multiple validation errors
// returned by DislikesReq.ValidateAll() if the designated constraints aren't met.
type DislikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikesReqMultiError) AllErrors() []error { return m }

// DislikesReqValidationError is the validation error returned by
// DislikesReq.Validate if the designated constraints aren't met.
type DislikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikesReqValidationError) ErrorName() string { return "DislikesReqValidationError" }

// Error satisfies the builtin error interface
func (e DislikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikesReqValidationError{}

// Validate checks the field values on DislikesReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DislikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DislikesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DislikesReplyMultiError, or
// nil if none found.
func (m *DislikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DislikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDislikeReply() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DislikesReplyValidationError{
						field:  fmt.Sprintf("DislikeReply[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DislikesReplyValidationError{
						field:  fmt.Sprintf("DislikeReply[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DislikesReplyValidationError{
					field:  fmt.Sprintf("DislikeReply[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DislikesReplyMultiError(errors)
	}

	return nil
}

// DislikesReplyMultiError is an error wrapping multiple validation errors
// returned by DislikesReply.ValidateAll() if the designated constraints
// aren't met.
type DislikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DislikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DislikesReplyMultiError) AllErrors() []error { return m }

// DislikesReplyValidationError is the validation error returned by
// DislikesReply.Validate if the designated constraints aren't met.
type DislikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DislikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DislikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DislikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DislikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DislikesReplyValidationError) ErrorName() string { return "DislikesReplyValidationError" }

// Error satisfies the builtin error interface
func (e DislikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDislikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DislikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DislikesReplyValidationError{}

// Validate checks the field values on SubjectDislikesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectDislikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectDislikesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectDislikesReqMultiError, or nil if none found.
func (m *SubjectDislikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectDislikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return SubjectDislikesReqMultiError(errors)
	}

	return nil
}

// SubjectDislikesReqMultiError is an error wrapping multiple validation errors
// returned by SubjectDislikesReq.ValidateAll() if the designated constraints
// aren't met.
type SubjectDislikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectDislikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectDislikesReqMultiError) AllErrors() []error { return m }

// SubjectDislikesReqValidationError is the validation error returned by
// SubjectDislikesReq.Validate if the designated constraints aren't met.
type SubjectDislikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectDislikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectDislikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectDislikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectDislikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectDislikesReqValidationError) ErrorName() string {
	return "SubjectDislikesReqValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectDislikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectDislikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectDislikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectDislikesReqValidationError{}

// Validate checks the field values on SubjectDislikesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubjectDislikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubjectDislikesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubjectDislikesReplyMultiError, or nil if none found.
func (m *SubjectDislikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubjectDislikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubjectLikeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubjectDislikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubjectDislikesReplyValidationError{
						field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubjectDislikesReplyValidationError{
					field:  fmt.Sprintf("SubjectLikeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubjectDislikesReplyMultiError(errors)
	}

	return nil
}

// SubjectDislikesReplyMultiError is an error wrapping multiple validation
// errors returned by SubjectDislikesReply.ValidateAll() if the designated
// constraints aren't met.
type SubjectDislikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectDislikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectDislikesReplyMultiError) AllErrors() []error { return m }

// SubjectDislikesReplyValidationError is the validation error returned by
// SubjectDislikesReply.Validate if the designated constraints aren't met.
type SubjectDislikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectDislikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectDislikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectDislikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectDislikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectDislikesReplyValidationError) ErrorName() string {
	return "SubjectDislikesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SubjectDislikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubjectDislikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectDislikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectDislikesReplyValidationError{}

// Validate checks the field values on UserDislikesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDislikesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDislikesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDislikesReqMultiError, or nil if none found.
func (m *UserDislikesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDislikesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return UserDislikesReqMultiError(errors)
	}

	return nil
}

// UserDislikesReqMultiError is an error wrapping multiple validation errors
// returned by UserDislikesReq.ValidateAll() if the designated constraints
// aren't met.
type UserDislikesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDislikesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDislikesReqMultiError) AllErrors() []error { return m }

// UserDislikesReqValidationError is the validation error returned by
// UserDislikesReq.Validate if the designated constraints aren't met.
type UserDislikesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDislikesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDislikesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDislikesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDislikesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDislikesReqValidationError) ErrorName() string { return "UserDislikesReqValidationError" }

// Error satisfies the builtin error interface
func (e UserDislikesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDislikesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDislikesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDislikesReqValidationError{}

// Validate checks the field values on UserDislikesReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDislikesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDislikesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDislikesReplyMultiError, or nil if none found.
func (m *UserDislikesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDislikesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDislikesReplyMultiError(errors)
	}

	return nil
}

// UserDislikesReplyMultiError is an error wrapping multiple validation errors
// returned by UserDislikesReply.ValidateAll() if the designated constraints
// aren't met.
type UserDislikesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDislikesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDislikesReplyMultiError) AllErrors() []error { return m }

// UserDislikesReplyValidationError is the validation error returned by
// UserDislikesReply.Validate if the designated constraints aren't met.
type UserDislikesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDislikesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDislikesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDislikesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDislikesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDislikesReplyValidationError) ErrorName() string {
	return "UserDislikesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserDislikesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDislikesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDislikesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDislikesReplyValidationError{}

// Validate checks the field values on CountSubjectDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountSubjectDislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountSubjectDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountSubjectDislikeReqMultiError, or nil if none found.
func (m *CountSubjectDislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountSubjectDislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mid

	// no validation rules for Oid

	// no validation rules for Bid

	// no validation rules for Sid

	if len(errors) > 0 {
		return CountSubjectDislikeReqMultiError(errors)
	}

	return nil
}

// CountSubjectDislikeReqMultiError is an error wrapping multiple validation
// errors returned by CountSubjectDislikeReq.ValidateAll() if the designated
// constraints aren't met.
type CountSubjectDislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountSubjectDislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountSubjectDislikeReqMultiError) AllErrors() []error { return m }

// CountSubjectDislikeReqValidationError is the validation error returned by
// CountSubjectDislikeReq.Validate if the designated constraints aren't met.
type CountSubjectDislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountSubjectDislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountSubjectDislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountSubjectDislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountSubjectDislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountSubjectDislikeReqValidationError) ErrorName() string {
	return "CountSubjectDislikeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CountSubjectDislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountSubjectDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountSubjectDislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountSubjectDislikeReqValidationError{}

// Validate checks the field values on CountSubjectDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountSubjectDislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountSubjectDislikeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountSubjectDislikeReplyMultiError, or nil if none found.
func (m *CountSubjectDislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountSubjectDislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountSubjectDislikeReplyMultiError(errors)
	}

	return nil
}

// CountSubjectDislikeReplyMultiError is an error wrapping multiple validation
// errors returned by CountSubjectDislikeReply.ValidateAll() if the designated
// constraints aren't met.
type CountSubjectDislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountSubjectDislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountSubjectDislikeReplyMultiError) AllErrors() []error { return m }

// CountSubjectDislikeReplyValidationError is the validation error returned by
// CountSubjectDislikeReply.Validate if the designated constraints aren't met.
type CountSubjectDislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountSubjectDislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountSubjectDislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountSubjectDislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountSubjectDislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountSubjectDislikeReplyValidationError) ErrorName() string {
	return "CountSubjectDislikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountSubjectDislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountSubjectDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountSubjectDislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountSubjectDislikeReplyValidationError{}

// Validate checks the field values on CountObjectDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountObjectDislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountObjectDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountObjectDislikeReqMultiError, or nil if none found.
func (m *CountObjectDislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountObjectDislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountObjectDislikeReqMultiError(errors)
	}

	return nil
}

// CountObjectDislikeReqMultiError is an error wrapping multiple validation
// errors returned by CountObjectDislikeReq.ValidateAll() if the designated
// constraints aren't met.
type CountObjectDislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountObjectDislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountObjectDislikeReqMultiError) AllErrors() []error { return m }

// CountObjectDislikeReqValidationError is the validation error returned by
// CountObjectDislikeReq.Validate if the designated constraints aren't met.
type CountObjectDislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountObjectDislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountObjectDislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountObjectDislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountObjectDislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountObjectDislikeReqValidationError) ErrorName() string {
	return "CountObjectDislikeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CountObjectDislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountObjectDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountObjectDislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountObjectDislikeReqValidationError{}

// Validate checks the field values on CountObjectDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountObjectDislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountObjectDislikeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountObjectDislikeReplyMultiError, or nil if none found.
func (m *CountObjectDislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountObjectDislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountObjectDislikeReplyMultiError(errors)
	}

	return nil
}

// CountObjectDislikeReplyMultiError is an error wrapping multiple validation
// errors returned by CountObjectDislikeReply.ValidateAll() if the designated
// constraints aren't met.
type CountObjectDislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountObjectDislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountObjectDislikeReplyMultiError) AllErrors() []error { return m }

// CountObjectDislikeReplyValidationError is the validation error returned by
// CountObjectDislikeReply.Validate if the designated constraints aren't met.
type CountObjectDislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountObjectDislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountObjectDislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountObjectDislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountObjectDislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountObjectDislikeReplyValidationError) ErrorName() string {
	return "CountObjectDislikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountObjectDislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountObjectDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountObjectDislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountObjectDislikeReplyValidationError{}

// Validate checks the field values on CountUserDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountUserDislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountUserDislikeReqMultiError, or nil if none found.
func (m *CountUserDislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserDislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountUserDislikeReqMultiError(errors)
	}

	return nil
}

// CountUserDislikeReqMultiError is an error wrapping multiple validation
// errors returned by CountUserDislikeReq.ValidateAll() if the designated
// constraints aren't met.
type CountUserDislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserDislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserDislikeReqMultiError) AllErrors() []error { return m }

// CountUserDislikeReqValidationError is the validation error returned by
// CountUserDislikeReq.Validate if the designated constraints aren't met.
type CountUserDislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserDislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserDislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserDislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserDislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserDislikeReqValidationError) ErrorName() string {
	return "CountUserDislikeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserDislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserDislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserDislikeReqValidationError{}

// Validate checks the field values on CountUserDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountUserDislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountUserDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountUserDislikeReplyMultiError, or nil if none found.
func (m *CountUserDislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CountUserDislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CountUserDislikeReplyMultiError(errors)
	}

	return nil
}

// CountUserDislikeReplyMultiError is an error wrapping multiple validation
// errors returned by CountUserDislikeReply.ValidateAll() if the designated
// constraints aren't met.
type CountUserDislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountUserDislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountUserDislikeReplyMultiError) AllErrors() []error { return m }

// CountUserDislikeReplyValidationError is the validation error returned by
// CountUserDislikeReply.Validate if the designated constraints aren't met.
type CountUserDislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountUserDislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountUserDislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountUserDislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountUserDislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountUserDislikeReplyValidationError) ErrorName() string {
	return "CountUserDislikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CountUserDislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountUserDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountUserDislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountUserDislikeReplyValidationError{}

// Validate checks the field values on AddDislikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddDislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDislikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddDislikeReqMultiError, or
// nil if none found.
func (m *AddDislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDislikeReqMultiError(errors)
	}

	return nil
}

// AddDislikeReqMultiError is an error wrapping multiple validation errors
// returned by AddDislikeReq.ValidateAll() if the designated constraints
// aren't met.
type AddDislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDislikeReqMultiError) AllErrors() []error { return m }

// AddDislikeReqValidationError is the validation error returned by
// AddDislikeReq.Validate if the designated constraints aren't met.
type AddDislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDislikeReqValidationError) ErrorName() string { return "AddDislikeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddDislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDislikeReqValidationError{}

// Validate checks the field values on AddDislikeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDislikeReplyMultiError, or nil if none found.
func (m *AddDislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddDislikeReplyMultiError(errors)
	}

	return nil
}

// AddDislikeReplyMultiError is an error wrapping multiple validation errors
// returned by AddDislikeReply.ValidateAll() if the designated constraints
// aren't met.
type AddDislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDislikeReplyMultiError) AllErrors() []error { return m }

// AddDislikeReplyValidationError is the validation error returned by
// AddDislikeReply.Validate if the designated constraints aren't met.
type AddDislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDislikeReplyValidationError) ErrorName() string { return "AddDislikeReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddDislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDislikeReplyValidationError{}

// Validate checks the field values on CancelDislikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelDislikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDislikeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDislikeReqMultiError, or nil if none found.
func (m *CancelDislikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDislikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelDislikeReqMultiError(errors)
	}

	return nil
}

// CancelDislikeReqMultiError is an error wrapping multiple validation errors
// returned by CancelDislikeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelDislikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDislikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDislikeReqMultiError) AllErrors() []error { return m }

// CancelDislikeReqValidationError is the validation error returned by
// CancelDislikeReq.Validate if the designated constraints aren't met.
type CancelDislikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDislikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDislikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDislikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDislikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDislikeReqValidationError) ErrorName() string { return "CancelDislikeReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelDislikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDislikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDislikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDislikeReqValidationError{}

// Validate checks the field values on CancelDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDislikeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDislikeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDislikeReplyMultiError, or nil if none found.
func (m *CancelDislikeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDislikeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelDislikeReplyMultiError(errors)
	}

	return nil
}

// CancelDislikeReplyMultiError is an error wrapping multiple validation errors
// returned by CancelDislikeReply.ValidateAll() if the designated constraints
// aren't met.
type CancelDislikeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDislikeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDislikeReplyMultiError) AllErrors() []error { return m }

// CancelDislikeReplyValidationError is the validation error returned by
// CancelDislikeReply.Validate if the designated constraints aren't met.
type CancelDislikeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDislikeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDislikeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDislikeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDislikeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDislikeReplyValidationError) ErrorName() string {
	return "CancelDislikeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDislikeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDislikeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDislikeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDislikeReplyValidationError{}
