// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package domainuserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "redbook/api/redbookpb/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRpcClient interface {
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// rpc GetUser(UidReq) returns (UserResponse);
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	// rpc UpdateProfile(UpdateProfileReq) returns (UpdateProfileResponse);
	GetUserInfoByUid(ctx context.Context, in *GetUserInfoByUidReq, opts ...grpc.CallOption) (*GetUserInfoByUidResponse, error)
	MapUserInfoByUids(ctx context.Context, in *MapUserInfoByUidsReq, opts ...grpc.CallOption) (*MapUserInfoByUidsResponse, error)
	// rpc InfosByName(NamesReq) returns (InfosResponse);
	GetUserByUidCard(ctx context.Context, in *GetUserCardByUidReq, opts ...grpc.CallOption) (*GetUserCardByUidResponse, error)
	// rpc Cards(UidsReq) returns (CardsResponse);
	GetUserProfileByUid(ctx context.Context, in *GetUserProfileByUidReq, opts ...grpc.CallOption) (*GetUserProfileByUidResponse, error)
}

type userRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRpcClient(cc grpc.ClientConnInterface) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserInfoByUid(ctx context.Context, in *GetUserInfoByUidReq, opts ...grpc.CallOption) (*GetUserInfoByUidResponse, error) {
	out := new(GetUserInfoByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/GetUserInfoByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) MapUserInfoByUids(ctx context.Context, in *MapUserInfoByUidsReq, opts ...grpc.CallOption) (*MapUserInfoByUidsResponse, error) {
	out := new(MapUserInfoByUidsResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/MapUserInfoByUids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserByUidCard(ctx context.Context, in *GetUserCardByUidReq, opts ...grpc.CallOption) (*GetUserCardByUidResponse, error) {
	out := new(GetUserCardByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/GetUserByUidCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) GetUserProfileByUid(ctx context.Context, in *GetUserProfileByUidReq, opts ...grpc.CallOption) (*GetUserProfileByUidResponse, error) {
	out := new(GetUserProfileByUidResponse)
	err := c.cc.Invoke(ctx, "/domain.user.v1.UserRpc/GetUserProfileByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
// All implementations must embed UnimplementedUserRpcServer
// for forward compatibility
type UserRpcServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResponse, error)
	// rpc GetUser(UidReq) returns (UserResponse);
	UpdateUser(context.Context, *UpdateUserReq) (*v1.EmptyResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*v1.EmptyResponse, error)
	// rpc UpdateProfile(UpdateProfileReq) returns (UpdateProfileResponse);
	GetUserInfoByUid(context.Context, *GetUserInfoByUidReq) (*GetUserInfoByUidResponse, error)
	MapUserInfoByUids(context.Context, *MapUserInfoByUidsReq) (*MapUserInfoByUidsResponse, error)
	// rpc InfosByName(NamesReq) returns (InfosResponse);
	GetUserByUidCard(context.Context, *GetUserCardByUidReq) (*GetUserCardByUidResponse, error)
	// rpc Cards(UidsReq) returns (CardsResponse);
	GetUserProfileByUid(context.Context, *GetUserProfileByUidReq) (*GetUserProfileByUidResponse, error)
	mustEmbedUnimplementedUserRpcServer()
}

// UnimplementedUserRpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (UnimplementedUserRpcServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserRpcServer) UpdateUser(context.Context, *UpdateUserReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserRpcServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserRpcServer) GetUserInfoByUid(context.Context, *GetUserInfoByUidReq) (*GetUserInfoByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUid not implemented")
}
func (UnimplementedUserRpcServer) MapUserInfoByUids(context.Context, *MapUserInfoByUidsReq) (*MapUserInfoByUidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapUserInfoByUids not implemented")
}
func (UnimplementedUserRpcServer) GetUserByUidCard(context.Context, *GetUserCardByUidReq) (*GetUserCardByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUidCard not implemented")
}
func (UnimplementedUserRpcServer) GetUserProfileByUid(context.Context, *GetUserProfileByUidReq) (*GetUserProfileByUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfileByUid not implemented")
}
func (UnimplementedUserRpcServer) mustEmbedUnimplementedUserRpcServer() {}

// UnsafeUserRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRpcServer will
// result in compilation errors.
type UnsafeUserRpcServer interface {
	mustEmbedUnimplementedUserRpcServer()
}

func RegisterUserRpcServer(s grpc.ServiceRegistrar, srv UserRpcServer) {
	s.RegisterService(&UserRpc_ServiceDesc, srv)
}

func _UserRpc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserInfoByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserInfoByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/GetUserInfoByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserInfoByUid(ctx, req.(*GetUserInfoByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_MapUserInfoByUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapUserInfoByUidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).MapUserInfoByUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/MapUserInfoByUids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).MapUserInfoByUids(ctx, req.(*MapUserInfoByUidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserByUidCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCardByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserByUidCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/GetUserByUidCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserByUidCard(ctx, req.(*GetUserCardByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_GetUserProfileByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).GetUserProfileByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.user.v1.UserRpc/GetUserProfileByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).GetUserProfileByUid(ctx, req.(*GetUserProfileByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRpc_ServiceDesc is the grpc.ServiceDesc for UserRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.user.v1.UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserRpc_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserRpc_UpdateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserRpc_UpdatePassword_Handler,
		},
		{
			MethodName: "GetUserInfoByUid",
			Handler:    _UserRpc_GetUserInfoByUid_Handler,
		},
		{
			MethodName: "MapUserInfoByUids",
			Handler:    _UserRpc_MapUserInfoByUids_Handler,
		},
		{
			MethodName: "GetUserByUidCard",
			Handler:    _UserRpc_GetUserByUidCard_Handler,
		},
		{
			MethodName: "GetUserProfileByUid",
			Handler:    _UserRpc_GetUserProfileByUid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/user/v1/user.proto",
}
