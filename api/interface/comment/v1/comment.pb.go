// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: interface/comment/v1/comment.proto

package commentv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	v1 "redbook/api/redbookpb/v1"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Subject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerUid string `protobuf:"bytes,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	BelongId string `protobuf:"bytes,3,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	BizType  string `protobuf:"bytes,4,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	// gotags: json:"created_at"
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// gotags: json:"updated_at"
	UpdatedAt int64 `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// @gotags: json:"floor_count"
	FloorCount int32 `protobuf:"varint,7,opt,name=floor_count,json=floorCount,proto3" json:"floor_count"`
	// @gotags: json:"reply_count"
	ReplyCount int32 `protobuf:"varint,8,opt,name=reply_count,json=replyCount,proto3" json:"reply_count"`
	// @gotags: json:"state"
	State int32 `protobuf:"varint,9,opt,name=state,proto3" json:"state"`
	// @gotags: json:"attr"
	Attr int64  `protobuf:"varint,10,opt,name=attr,proto3" json:"attr"`
	Meta string `protobuf:"bytes,11,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Subject) Reset() {
	*x = Subject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subject) ProtoMessage() {}

func (x *Subject) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subject.ProtoReflect.Descriptor instead.
func (*Subject) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{0}
}

func (x *Subject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subject) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *Subject) GetBelongId() string {
	if x != nil {
		return x.BelongId
	}
	return ""
}

func (x *Subject) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *Subject) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Subject) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Subject) GetFloorCount() int32 {
	if x != nil {
		return x.FloorCount
	}
	return 0
}

func (x *Subject) GetReplyCount() int32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *Subject) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Subject) GetAttr() int64 {
	if x != nil {
		return x.Attr
	}
	return 0
}

func (x *Subject) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

type FloorAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"reply_count"
	ReplyCount int32 `protobuf:"varint,1,opt,name=reply_count,json=replyCount,proto3" json:"reply_count"`
	// @gotags: json:"pin_admin"
	PinAdmin int32 `protobuf:"varint,2,opt,name=pin_admin,json=pinAdmin,proto3" json:"pin_admin"`
	// @gotags: json:"pin_owner"
	PinOwner int32 `protobuf:"varint,3,opt,name=pin_owner,json=pinOwner,proto3" json:"pin_owner"`
	// @gotags: json:"fold"
	Fold int32 `protobuf:"varint,4,opt,name=fold,proto3" json:"fold"`
	// @gotags: json:"hot"
	Hot bool `protobuf:"varint,5,opt,name=hot,proto3" json:"hot"`
}

func (x *FloorAttr) Reset() {
	*x = FloorAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloorAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloorAttr) ProtoMessage() {}

func (x *FloorAttr) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloorAttr.ProtoReflect.Descriptor instead.
func (*FloorAttr) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{1}
}

func (x *FloorAttr) GetReplyCount() int32 {
	if x != nil {
		return x.ReplyCount
	}
	return 0
}

func (x *FloorAttr) GetPinAdmin() int32 {
	if x != nil {
		return x.PinAdmin
	}
	return 0
}

func (x *FloorAttr) GetPinOwner() int32 {
	if x != nil {
		return x.PinOwner
	}
	return 0
}

func (x *FloorAttr) GetFold() int32 {
	if x != nil {
		return x.Fold
	}
	return 0
}

func (x *FloorAttr) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerUid  string `protobuf:"bytes,2,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	SubjectId string `protobuf:"bytes,3,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	BizType   string `protobuf:"bytes,4,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	// @gotags: json:"floor_id"
	FloorId string `protobuf:"bytes,5,opt,name=floor_id,json=floorId,proto3" json:"floor_id"`
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// @gotags: json:"at_uid"
	AtUid string `protobuf:"bytes,7,opt,name=at_uid,json=atUid,proto3" json:"at_uid"`
	// @gotags: json:"state"
	State int32 `protobuf:"varint,8,opt,name=state,proto3" json:"state"`
	// @gotags: json:"created_at"
	CreatedAt int64 `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	// @gotags: json:"updated_at"
	UpdatedAt int64 `protobuf:"varint,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	// @gotags: json:"deleted"
	Deleted int32 `protobuf:"varint,11,opt,name=deleted,proto3" json:"deleted"`
	// @gotags: json:"like_count"
	LikeCount int32 `protobuf:"varint,12,opt,name=like_count,json=likeCount,proto3" json:"like_count"`
	// @gotags: json:"dislike_count"
	DislikeCount int32 `protobuf:"varint,13,opt,name=dislike_count,json=dislikeCount,proto3" json:"dislike_count"`
	Dialog       int64 `protobuf:"varint,14,opt,name=dialog,proto3" json:"dialog,omitempty"`
	// @gotags: json:"fan_grade"
	FanGrade   int32        `protobuf:"varint,15,opt,name=fan_grade,json=fanGrade,proto3" json:"fan_grade"`
	Platform   int32        `protobuf:"varint,16,opt,name=platform,proto3" json:"platform,omitempty"`
	Device     string       `protobuf:"bytes,17,opt,name=device,proto3" json:"device,omitempty"`
	Attr       int64        `protobuf:"varint,18,opt,name=attr,proto3" json:"attr,omitempty"`
	FloorAttr  *FloorAttr   `protobuf:"bytes,19,opt,name=floor_attr,json=floorAttr,proto3" json:"floor_attr,omitempty"`
	UserInfo   *v1.UserInfo `protobuf:"bytes,20,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	AtUserInfo *v1.UserInfo `protobuf:"bytes,21,opt,name=at_user_info,json=atUserInfo,proto3" json:"at_user_info,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{2}
}

func (x *Reply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reply) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *Reply) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *Reply) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *Reply) GetFloorId() string {
	if x != nil {
		return x.FloorId
	}
	return ""
}

func (x *Reply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Reply) GetAtUid() string {
	if x != nil {
		return x.AtUid
	}
	return ""
}

func (x *Reply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Reply) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Reply) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Reply) GetDeleted() int32 {
	if x != nil {
		return x.Deleted
	}
	return 0
}

func (x *Reply) GetLikeCount() int32 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Reply) GetDislikeCount() int32 {
	if x != nil {
		return x.DislikeCount
	}
	return 0
}

func (x *Reply) GetDialog() int64 {
	if x != nil {
		return x.Dialog
	}
	return 0
}

func (x *Reply) GetFanGrade() int32 {
	if x != nil {
		return x.FanGrade
	}
	return 0
}

func (x *Reply) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *Reply) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Reply) GetAttr() int64 {
	if x != nil {
		return x.Attr
	}
	return 0
}

func (x *Reply) GetFloorAttr() *FloorAttr {
	if x != nil {
		return x.FloorAttr
	}
	return nil
}

func (x *Reply) GetUserInfo() *v1.UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Reply) GetAtUserInfo() *v1.UserInfo {
	if x != nil {
		return x.AtUserInfo
	}
	return nil
}

type Floor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootReply *Reply   `protobuf:"bytes,1,opt,name=root_reply,json=rootReply,proto3" json:"root_reply,omitempty"`
	Replies   []*Reply `protobuf:"bytes,2,rep,name=replies,proto3" json:"replies,omitempty"`
	// @gotags: json:"total"
	Total  int32      `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	Cursor *v1.Cursor `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *Floor) Reset() {
	*x = Floor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Floor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Floor) ProtoMessage() {}

func (x *Floor) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Floor.ProtoReflect.Descriptor instead.
func (*Floor) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{3}
}

func (x *Floor) GetRootReply() *Reply {
	if x != nil {
		return x.RootReply
	}
	return nil
}

func (x *Floor) GetReplies() []*Reply {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Floor) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Floor) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

type CreateSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongId int64  `protobuf:"varint,1,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	BizType  string `protobuf:"bytes,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	OwnerUid int64  `protobuf:"varint,3,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
}

func (x *CreateSubjectReq) Reset() {
	*x = CreateSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectReq) ProtoMessage() {}

func (x *CreateSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectReq.ProtoReflect.Descriptor instead.
func (*CreateSubjectReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSubjectReq) GetBelongId() int64 {
	if x != nil {
		return x.BelongId
	}
	return 0
}

func (x *CreateSubjectReq) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *CreateSubjectReq) GetOwnerUid() int64 {
	if x != nil {
		return x.OwnerUid
	}
	return 0
}

type CreateSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CreateSubjectResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateSubjectResponse) Reset() {
	*x = CreateSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectResponse) ProtoMessage() {}

func (x *CreateSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSubjectResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateSubjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateSubjectResponse) GetData() *CreateSubjectResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSubjectByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId int64 `protobuf:"varint,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *GetSubjectByIdReq) Reset() {
	*x = GetSubjectByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByIdReq) ProtoMessage() {}

func (x *GetSubjectByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByIdReq.ProtoReflect.Descriptor instead.
func (*GetSubjectByIdReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{6}
}

func (x *GetSubjectByIdReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type GetSubjectByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *GetSubjectByIdResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubjectByIdResponse) Reset() {
	*x = GetSubjectByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByIdResponse) ProtoMessage() {}

func (x *GetSubjectByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByIdResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectByIdResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubjectByIdResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubjectByIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubjectByIdResponse) GetData() *GetSubjectByIdResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSubjectByBelongReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BelongId int64  `protobuf:"varint,1,opt,name=belong_id,json=belongId,proto3" json:"belong_id,omitempty"`
	BizType  string `protobuf:"bytes,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
}

func (x *GetSubjectByBelongReq) Reset() {
	*x = GetSubjectByBelongReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByBelongReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByBelongReq) ProtoMessage() {}

func (x *GetSubjectByBelongReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByBelongReq.ProtoReflect.Descriptor instead.
func (*GetSubjectByBelongReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubjectByBelongReq) GetBelongId() int64 {
	if x != nil {
		return x.BelongId
	}
	return 0
}

func (x *GetSubjectByBelongReq) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

type GetSubjectByBelongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *GetSubjectByBelongResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetSubjectByBelongResponse) Reset() {
	*x = GetSubjectByBelongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByBelongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByBelongResponse) ProtoMessage() {}

func (x *GetSubjectByBelongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByBelongResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectByBelongResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubjectByBelongResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubjectByBelongResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubjectByBelongResponse) GetData() *GetSubjectByBelongResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFloor   bool   `protobuf:"varint,1,opt,name=is_floor,json=isFloor,proto3" json:"is_floor,omitempty"`
	Uid       int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	SubjectId int64  `protobuf:"varint,3,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	BizType   string `protobuf:"bytes,4,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	FloorId   int64  `protobuf:"varint,5,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
	Content   string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	AtUid     int64  `protobuf:"varint,7,opt,name=at_uid,json=atUid,proto3" json:"at_uid,omitempty"`
}

func (x *CreateReplyReq) Reset() {
	*x = CreateReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyReq) ProtoMessage() {}

func (x *CreateReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyReq.ProtoReflect.Descriptor instead.
func (*CreateReplyReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{10}
}

func (x *CreateReplyReq) GetIsFloor() bool {
	if x != nil {
		return x.IsFloor
	}
	return false
}

func (x *CreateReplyReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CreateReplyReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *CreateReplyReq) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *CreateReplyReq) GetFloorId() int64 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

func (x *CreateReplyReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateReplyReq) GetAtUid() int64 {
	if x != nil {
		return x.AtUid
	}
	return 0
}

type CreateReplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CreateReplyResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateReplyResponse) Reset() {
	*x = CreateReplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyResponse) ProtoMessage() {}

func (x *CreateReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyResponse.ProtoReflect.Descriptor instead.
func (*CreateReplyResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{11}
}

func (x *CreateReplyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateReplyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateReplyResponse) GetData() *CreateReplyResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListFloorBySubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cursor *v1.Cursor `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Sort   *v1.Sort   `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListFloorBySubjectReq) Reset() {
	*x = ListFloorBySubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFloorBySubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFloorBySubjectReq) ProtoMessage() {}

func (x *ListFloorBySubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFloorBySubjectReq.ProtoReflect.Descriptor instead.
func (*ListFloorBySubjectReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{12}
}

func (x *ListFloorBySubjectReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListFloorBySubjectReq) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListFloorBySubjectReq) GetSort() *v1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ListFloorBySubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ListFloorBySubjectResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListFloorBySubjectResponse) Reset() {
	*x = ListFloorBySubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFloorBySubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFloorBySubjectResponse) ProtoMessage() {}

func (x *ListFloorBySubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFloorBySubjectResponse.ProtoReflect.Descriptor instead.
func (*ListFloorBySubjectResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{13}
}

func (x *ListFloorBySubjectResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListFloorBySubjectResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListFloorBySubjectResponse) GetData() *ListFloorBySubjectResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListReplyByFloorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId int64      `protobuf:"varint,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	FloorId   int64      `protobuf:"varint,2,opt,name=floor_id,json=floorId,proto3" json:"floor_id,omitempty"`
	Cursor    *v1.Cursor `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Sort      *v1.Sort   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListReplyByFloorReq) Reset() {
	*x = ListReplyByFloorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplyByFloorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplyByFloorReq) ProtoMessage() {}

func (x *ListReplyByFloorReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplyByFloorReq.ProtoReflect.Descriptor instead.
func (*ListReplyByFloorReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{14}
}

func (x *ListReplyByFloorReq) GetSubjectId() int64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *ListReplyByFloorReq) GetFloorId() int64 {
	if x != nil {
		return x.FloorId
	}
	return 0
}

func (x *ListReplyByFloorReq) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *ListReplyByFloorReq) GetSort() *v1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ListReplyByFloorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *ListReplyByFloorResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListReplyByFloorResponse) Reset() {
	*x = ListReplyByFloorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplyByFloorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplyByFloorResponse) ProtoMessage() {}

func (x *ListReplyByFloorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplyByFloorResponse.ProtoReflect.Descriptor instead.
func (*ListReplyByFloorResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{15}
}

func (x *ListReplyByFloorResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListReplyByFloorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListReplyByFloorResponse) GetData() *ListReplyByFloorResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddLikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId int64 `protobuf:"varint,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	Uid     int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *AddLikeReq) Reset() {
	*x = AddLikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLikeReq) ProtoMessage() {}

func (x *AddLikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLikeReq.ProtoReflect.Descriptor instead.
func (*AddLikeReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{16}
}

func (x *AddLikeReq) GetReplyId() int64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *AddLikeReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type AddLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *AddLikeResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddLikeResponse) Reset() {
	*x = AddLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLikeResponse) ProtoMessage() {}

func (x *AddLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLikeResponse.ProtoReflect.Descriptor instead.
func (*AddLikeResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{17}
}

func (x *AddLikeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AddLikeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddLikeResponse) GetData() *AddLikeResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CancelLikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId int64 `protobuf:"varint,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	Uid     int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *CancelLikeReq) Reset() {
	*x = CancelLikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLikeReq) ProtoMessage() {}

func (x *CancelLikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLikeReq.ProtoReflect.Descriptor instead.
func (*CancelLikeReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{18}
}

func (x *CancelLikeReq) GetReplyId() int64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *CancelLikeReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type CancelLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CancelLikeResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CancelLikeResponse) Reset() {
	*x = CancelLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLikeResponse) ProtoMessage() {}

func (x *CancelLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLikeResponse.ProtoReflect.Descriptor instead.
func (*CancelLikeResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{19}
}

func (x *CancelLikeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CancelLikeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CancelLikeResponse) GetData() *CancelLikeResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type IsLikeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId int64 `protobuf:"varint,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	Uid     int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *IsLikeReq) Reset() {
	*x = IsLikeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLikeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLikeReq) ProtoMessage() {}

func (x *IsLikeReq) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLikeReq.ProtoReflect.Descriptor instead.
func (*IsLikeReq) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{20}
}

func (x *IsLikeReq) GetReplyId() int64 {
	if x != nil {
		return x.ReplyId
	}
	return 0
}

func (x *IsLikeReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type IsLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    *IsLikeResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IsLikeResponse) Reset() {
	*x = IsLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLikeResponse) ProtoMessage() {}

func (x *IsLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLikeResponse.ProtoReflect.Descriptor instead.
func (*IsLikeResponse) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{21}
}

func (x *IsLikeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IsLikeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IsLikeResponse) GetData() *IsLikeResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateSubjectResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *CreateSubjectResponse_Data) Reset() {
	*x = CreateSubjectResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubjectResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectResponse_Data) ProtoMessage() {}

func (x *CreateSubjectResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectResponse_Data.ProtoReflect.Descriptor instead.
func (*CreateSubjectResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CreateSubjectResponse_Data) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

type GetSubjectByIdResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *GetSubjectByIdResponse_Data) Reset() {
	*x = GetSubjectByIdResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByIdResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByIdResponse_Data) ProtoMessage() {}

func (x *GetSubjectByIdResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByIdResponse_Data.ProtoReflect.Descriptor instead.
func (*GetSubjectByIdResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetSubjectByIdResponse_Data) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type GetSubjectByBelongResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *GetSubjectByBelongResponse_Data) Reset() {
	*x = GetSubjectByBelongResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectByBelongResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByBelongResponse_Data) ProtoMessage() {}

func (x *GetSubjectByBelongResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByBelongResponse_Data.ProtoReflect.Descriptor instead.
func (*GetSubjectByBelongResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetSubjectByBelongResponse_Data) GetSubject() *Subject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type CreateReplyResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId string `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
}

func (x *CreateReplyResponse_Data) Reset() {
	*x = CreateReplyResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplyResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyResponse_Data) ProtoMessage() {}

func (x *CreateReplyResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyResponse_Data.ProtoReflect.Descriptor instead.
func (*CreateReplyResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CreateReplyResponse_Data) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

type ListFloorBySubjectResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Floors []*Floor `protobuf:"bytes,1,rep,name=floors,proto3" json:"floors,omitempty"`
	// @gotags: json:"total"
	Total  int32      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	Cursor *v1.Cursor `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListFloorBySubjectResponse_Data) Reset() {
	*x = ListFloorBySubjectResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFloorBySubjectResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFloorBySubjectResponse_Data) ProtoMessage() {}

func (x *ListFloorBySubjectResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFloorBySubjectResponse_Data.ProtoReflect.Descriptor instead.
func (*ListFloorBySubjectResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListFloorBySubjectResponse_Data) GetFloors() []*Floor {
	if x != nil {
		return x.Floors
	}
	return nil
}

func (x *ListFloorBySubjectResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFloorBySubjectResponse_Data) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

type ListReplyByFloorResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replies []*Reply `protobuf:"bytes,1,rep,name=replies,proto3" json:"replies,omitempty"`
	// @gotags: json:"total"
	Total  int32      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	Cursor *v1.Cursor `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListReplyByFloorResponse_Data) Reset() {
	*x = ListReplyByFloorResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReplyByFloorResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplyByFloorResponse_Data) ProtoMessage() {}

func (x *ListReplyByFloorResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplyByFloorResponse_Data.ProtoReflect.Descriptor instead.
func (*ListReplyByFloorResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListReplyByFloorResponse_Data) GetReplies() []*Reply {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *ListReplyByFloorResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListReplyByFloorResponse_Data) GetCursor() *v1.Cursor {
	if x != nil {
		return x.Cursor
	}
	return nil
}

type AddLikeResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddLikeResponse_Data) Reset() {
	*x = AddLikeResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLikeResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLikeResponse_Data) ProtoMessage() {}

func (x *AddLikeResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLikeResponse_Data.ProtoReflect.Descriptor instead.
func (*AddLikeResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{17, 0}
}

type CancelLikeResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelLikeResponse_Data) Reset() {
	*x = CancelLikeResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelLikeResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelLikeResponse_Data) ProtoMessage() {}

func (x *CancelLikeResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelLikeResponse_Data.ProtoReflect.Descriptor instead.
func (*CancelLikeResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{19, 0}
}

type IsLikeResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: json:"result"
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *IsLikeResponse_Data) Reset() {
	*x = IsLikeResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interface_comment_v1_comment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLikeResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLikeResponse_Data) ProtoMessage() {}

func (x *IsLikeResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_interface_comment_v1_comment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLikeResponse_Data.ProtoReflect.Descriptor instead.
func (*IsLikeResponse_Data) Descriptor() ([]byte, []int) {
	return file_interface_comment_v1_comment_proto_rawDescGZIP(), []int{21, 0}
}

func (x *IsLikeResponse_Data) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

var File_interface_comment_v1_comment_proto protoreflect.FileDescriptor

var file_interface_comment_v1_comment_proto_rawDesc = []byte{
	0x0a, 0x22, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x40, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x04, 0x0a, 0x07,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x0b, 0x32, 0x02, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a,
	0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x32, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x3a,
	0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20,
	0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92,
	0x41, 0x1d, 0x2a, 0x09, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x32, 0x09, 0x62,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x62, 0x69, 0x7a, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x01,
	0x30, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52,
	0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41,
	0x1f, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x0b,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0x0b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x2e, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a,
	0x09, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x2e, 0x92, 0x41, 0x21, 0x2a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x32, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01,
	0x30, 0x9a, 0x02, 0x01, 0x05, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x70,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x27,
	0x92, 0x41, 0x1d, 0x2a, 0x09, 0x70, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x09,
	0x70, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x05,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x27, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x70, 0x69, 0x6e, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x32, 0x09, 0x70, 0x69, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a,
	0x01, 0x30, 0x9a, 0x02, 0x01, 0x05, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70,
	0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6f, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x22, 0xb5, 0x0a,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x2a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x32, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x20, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x08,
	0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x07, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x32,
	0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x61, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xea, 0xde, 0x1f, 0x06,
	0x61, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x92, 0x41, 0x17, 0x2a, 0x06, 0x61, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x32, 0x06, 0x61, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x05, 0x61, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x37, 0xea, 0xde, 0x1f, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x37,
	0xea, 0xde, 0x1f, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x92, 0x41,
	0x1f, 0x2a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x32, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x37, 0xea,
	0xde, 0x1f, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41, 0x1f,
	0x2a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x05, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x65, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x40, 0xea, 0xde, 0x1f, 0x0d, 0x64, 0x69,
	0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92, 0x41, 0x25, 0x2a, 0x0d,
	0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x0d, 0x64,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x30, 0x9a,
	0x02, 0x01, 0x05, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x09,
	0x66, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0d, 0xea, 0xde, 0x1f, 0x09, 0x66, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x08,
	0x66, 0x61, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x61, 0x74, 0x74, 0x72, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x12, 0x70, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x42, 0x30, 0xea, 0xde, 0x1f, 0x0a,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x32, 0x0a, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x06, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x62, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x64,
	0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x2d, 0xea, 0xde, 0x1f, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x32,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01,
	0x06, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0c, 0x61,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12,
	0x6c, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x30, 0xea, 0xde, 0x1f, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x32,
	0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x3a, 0x01, 0x30, 0x9a, 0x02,
	0x01, 0x06, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x27, 0xea, 0xde, 0x1f,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x92, 0x41, 0x19, 0x2a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x32, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x30,
	0x9a, 0x02, 0x01, 0x06, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x09, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1f, 0x92, 0x41, 0x12, 0x32, 0x09,
	0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x2a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x2a, 0x92, 0x41, 0x1d, 0x2a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x32, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a,
	0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x25, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x28, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xce,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3f,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0xaa, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x09, 0x62, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2a, 0x92, 0x41,
	0x1d, 0x2a, 0x09, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x32, 0x09, 0x62, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x08, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x92, 0x41, 0x20, 0x2a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x18, 0x20, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd6, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x92, 0x41, 0x1f, 0x2a,
	0x08, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x32, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x9a, 0x02, 0x01, 0x02, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x2c, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x32, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30,
	0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xea, 0xde, 0x1f,
	0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x92, 0x41, 0x20, 0x2a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x9a, 0x02, 0x01, 0x07, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x18, 0x20, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x92,
	0x41, 0x1b, 0x2a, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x08, 0x66, 0x6c,
	0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2b, 0xea, 0xde, 0x1f, 0x06, 0x61, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x92, 0x41, 0x17, 0x2a, 0x06, 0x61, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x32, 0x06,
	0x61, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x05, 0x61, 0x74, 0x55, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x22,
	0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0x92, 0x41, 0x0f, 0x2a, 0x02, 0x69, 0x64, 0x32, 0x02, 0x69,
	0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x96, 0x02, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x7f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x6f, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f,
	0x6b, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x59, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x3a, 0xea, 0xde, 0x1f, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x92, 0x41, 0x1f, 0x2a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x32, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a,
	0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x32, 0x08, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x3a,
	0x01, 0x30, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x62,
	0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x64, 0x62, 0x6f, 0x6f, 0x6b, 0x70,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22,
	0x95, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x81, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x62,
	0x6f, 0x6f, 0x6b, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x6f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4c, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x32, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a,
	0x02, 0x01, 0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x06, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x72, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x64, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64,
	0x32, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x06,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x09, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x34, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x69, 0x64, 0x92, 0x41, 0x1b, 0x2a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64,
	0x32, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x3a, 0x01, 0x30, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x49, 0x73, 0x4c, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb6, 0x0a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x2b, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42,
	0x79, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x12, 0x7c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x24, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xca,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x30, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x12, 0x4d, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x7d, 0x2f, 0x7b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x7d, 0x2f, 0x7b, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x62, 0x79, 0x7d, 0x2f, 0x7b,
	0x73, 0x6f, 0x72, 0x74, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x79, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x56, 0x12, 0x54, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x7d, 0x2f, 0x7b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2e, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x7d, 0x2f, 0x7b, 0x73, 0x6f, 0x72, 0x74, 0x2e, 0x62, 0x79, 0x7d, 0x2f, 0x7b, 0x73, 0x6f,
	0x72, 0x74, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0x12, 0x6f, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x4c, 0x69, 0x6b, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0a, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6b,
	0x65, 0x12, 0x6c, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x69, 0x6b, 0x65, 0x2f, 0x69, 0x73, 0x42,
	0x56, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x72, 0x65, 0x64,
	0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interface_comment_v1_comment_proto_rawDescOnce sync.Once
	file_interface_comment_v1_comment_proto_rawDescData = file_interface_comment_v1_comment_proto_rawDesc
)

func file_interface_comment_v1_comment_proto_rawDescGZIP() []byte {
	file_interface_comment_v1_comment_proto_rawDescOnce.Do(func() {
		file_interface_comment_v1_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_interface_comment_v1_comment_proto_rawDescData)
	})
	return file_interface_comment_v1_comment_proto_rawDescData
}

var file_interface_comment_v1_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_interface_comment_v1_comment_proto_goTypes = []interface{}{
	(*Subject)(nil),                         // 0: interface.comment.v1.Subject
	(*FloorAttr)(nil),                       // 1: interface.comment.v1.FloorAttr
	(*Reply)(nil),                           // 2: interface.comment.v1.Reply
	(*Floor)(nil),                           // 3: interface.comment.v1.Floor
	(*CreateSubjectReq)(nil),                // 4: interface.comment.v1.CreateSubjectReq
	(*CreateSubjectResponse)(nil),           // 5: interface.comment.v1.CreateSubjectResponse
	(*GetSubjectByIdReq)(nil),               // 6: interface.comment.v1.GetSubjectByIdReq
	(*GetSubjectByIdResponse)(nil),          // 7: interface.comment.v1.GetSubjectByIdResponse
	(*GetSubjectByBelongReq)(nil),           // 8: interface.comment.v1.GetSubjectByBelongReq
	(*GetSubjectByBelongResponse)(nil),      // 9: interface.comment.v1.GetSubjectByBelongResponse
	(*CreateReplyReq)(nil),                  // 10: interface.comment.v1.CreateReplyReq
	(*CreateReplyResponse)(nil),             // 11: interface.comment.v1.CreateReplyResponse
	(*ListFloorBySubjectReq)(nil),           // 12: interface.comment.v1.ListFloorBySubjectReq
	(*ListFloorBySubjectResponse)(nil),      // 13: interface.comment.v1.ListFloorBySubjectResponse
	(*ListReplyByFloorReq)(nil),             // 14: interface.comment.v1.ListReplyByFloorReq
	(*ListReplyByFloorResponse)(nil),        // 15: interface.comment.v1.ListReplyByFloorResponse
	(*AddLikeReq)(nil),                      // 16: interface.comment.v1.AddLikeReq
	(*AddLikeResponse)(nil),                 // 17: interface.comment.v1.AddLikeResponse
	(*CancelLikeReq)(nil),                   // 18: interface.comment.v1.CancelLikeReq
	(*CancelLikeResponse)(nil),              // 19: interface.comment.v1.CancelLikeResponse
	(*IsLikeReq)(nil),                       // 20: interface.comment.v1.IsLikeReq
	(*IsLikeResponse)(nil),                  // 21: interface.comment.v1.IsLikeResponse
	(*CreateSubjectResponse_Data)(nil),      // 22: interface.comment.v1.CreateSubjectResponse.Data
	(*GetSubjectByIdResponse_Data)(nil),     // 23: interface.comment.v1.GetSubjectByIdResponse.Data
	(*GetSubjectByBelongResponse_Data)(nil), // 24: interface.comment.v1.GetSubjectByBelongResponse.Data
	(*CreateReplyResponse_Data)(nil),        // 25: interface.comment.v1.CreateReplyResponse.Data
	(*ListFloorBySubjectResponse_Data)(nil), // 26: interface.comment.v1.ListFloorBySubjectResponse.Data
	(*ListReplyByFloorResponse_Data)(nil),   // 27: interface.comment.v1.ListReplyByFloorResponse.Data
	(*AddLikeResponse_Data)(nil),            // 28: interface.comment.v1.AddLikeResponse.Data
	(*CancelLikeResponse_Data)(nil),         // 29: interface.comment.v1.CancelLikeResponse.Data
	(*IsLikeResponse_Data)(nil),             // 30: interface.comment.v1.IsLikeResponse.Data
	(*v1.UserInfo)(nil),                     // 31: redbookpb.v1.UserInfo
	(*v1.Cursor)(nil),                       // 32: redbookpb.v1.Cursor
	(*v1.Sort)(nil),                         // 33: redbookpb.v1.Sort
}
var file_interface_comment_v1_comment_proto_depIdxs = []int32{
	1,  // 0: interface.comment.v1.Reply.floor_attr:type_name -> interface.comment.v1.FloorAttr
	31, // 1: interface.comment.v1.Reply.user_info:type_name -> redbookpb.v1.UserInfo
	31, // 2: interface.comment.v1.Reply.at_user_info:type_name -> redbookpb.v1.UserInfo
	2,  // 3: interface.comment.v1.Floor.root_reply:type_name -> interface.comment.v1.Reply
	2,  // 4: interface.comment.v1.Floor.replies:type_name -> interface.comment.v1.Reply
	32, // 5: interface.comment.v1.Floor.cursor:type_name -> redbookpb.v1.Cursor
	22, // 6: interface.comment.v1.CreateSubjectResponse.data:type_name -> interface.comment.v1.CreateSubjectResponse.Data
	23, // 7: interface.comment.v1.GetSubjectByIdResponse.data:type_name -> interface.comment.v1.GetSubjectByIdResponse.Data
	24, // 8: interface.comment.v1.GetSubjectByBelongResponse.data:type_name -> interface.comment.v1.GetSubjectByBelongResponse.Data
	25, // 9: interface.comment.v1.CreateReplyResponse.data:type_name -> interface.comment.v1.CreateReplyResponse.Data
	32, // 10: interface.comment.v1.ListFloorBySubjectReq.cursor:type_name -> redbookpb.v1.Cursor
	33, // 11: interface.comment.v1.ListFloorBySubjectReq.sort:type_name -> redbookpb.v1.Sort
	26, // 12: interface.comment.v1.ListFloorBySubjectResponse.data:type_name -> interface.comment.v1.ListFloorBySubjectResponse.Data
	32, // 13: interface.comment.v1.ListReplyByFloorReq.cursor:type_name -> redbookpb.v1.Cursor
	33, // 14: interface.comment.v1.ListReplyByFloorReq.sort:type_name -> redbookpb.v1.Sort
	27, // 15: interface.comment.v1.ListReplyByFloorResponse.data:type_name -> interface.comment.v1.ListReplyByFloorResponse.Data
	28, // 16: interface.comment.v1.AddLikeResponse.data:type_name -> interface.comment.v1.AddLikeResponse.Data
	29, // 17: interface.comment.v1.CancelLikeResponse.data:type_name -> interface.comment.v1.CancelLikeResponse.Data
	30, // 18: interface.comment.v1.IsLikeResponse.data:type_name -> interface.comment.v1.IsLikeResponse.Data
	0,  // 19: interface.comment.v1.GetSubjectByIdResponse.Data.subject:type_name -> interface.comment.v1.Subject
	0,  // 20: interface.comment.v1.GetSubjectByBelongResponse.Data.subject:type_name -> interface.comment.v1.Subject
	3,  // 21: interface.comment.v1.ListFloorBySubjectResponse.Data.floors:type_name -> interface.comment.v1.Floor
	32, // 22: interface.comment.v1.ListFloorBySubjectResponse.Data.cursor:type_name -> redbookpb.v1.Cursor
	2,  // 23: interface.comment.v1.ListReplyByFloorResponse.Data.replies:type_name -> interface.comment.v1.Reply
	32, // 24: interface.comment.v1.ListReplyByFloorResponse.Data.cursor:type_name -> redbookpb.v1.Cursor
	4,  // 25: interface.comment.v1.CommentInterface.CreateSubject:input_type -> interface.comment.v1.CreateSubjectReq
	6,  // 26: interface.comment.v1.CommentInterface.GetSubjectById:input_type -> interface.comment.v1.GetSubjectByIdReq
	8,  // 27: interface.comment.v1.CommentInterface.GetSubjectByBelong:input_type -> interface.comment.v1.GetSubjectByBelongReq
	10, // 28: interface.comment.v1.CommentInterface.CreateReply:input_type -> interface.comment.v1.CreateReplyReq
	12, // 29: interface.comment.v1.CommentInterface.ListFloorBySubject:input_type -> interface.comment.v1.ListFloorBySubjectReq
	14, // 30: interface.comment.v1.CommentInterface.ListReplyByFloor:input_type -> interface.comment.v1.ListReplyByFloorReq
	16, // 31: interface.comment.v1.CommentInterface.AddLike:input_type -> interface.comment.v1.AddLikeReq
	18, // 32: interface.comment.v1.CommentInterface.CancelLike:input_type -> interface.comment.v1.CancelLikeReq
	20, // 33: interface.comment.v1.CommentInterface.IsLike:input_type -> interface.comment.v1.IsLikeReq
	5,  // 34: interface.comment.v1.CommentInterface.CreateSubject:output_type -> interface.comment.v1.CreateSubjectResponse
	7,  // 35: interface.comment.v1.CommentInterface.GetSubjectById:output_type -> interface.comment.v1.GetSubjectByIdResponse
	9,  // 36: interface.comment.v1.CommentInterface.GetSubjectByBelong:output_type -> interface.comment.v1.GetSubjectByBelongResponse
	11, // 37: interface.comment.v1.CommentInterface.CreateReply:output_type -> interface.comment.v1.CreateReplyResponse
	13, // 38: interface.comment.v1.CommentInterface.ListFloorBySubject:output_type -> interface.comment.v1.ListFloorBySubjectResponse
	15, // 39: interface.comment.v1.CommentInterface.ListReplyByFloor:output_type -> interface.comment.v1.ListReplyByFloorResponse
	17, // 40: interface.comment.v1.CommentInterface.AddLike:output_type -> interface.comment.v1.AddLikeResponse
	19, // 41: interface.comment.v1.CommentInterface.CancelLike:output_type -> interface.comment.v1.CancelLikeResponse
	21, // 42: interface.comment.v1.CommentInterface.IsLike:output_type -> interface.comment.v1.IsLikeResponse
	34, // [34:43] is the sub-list for method output_type
	25, // [25:34] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_interface_comment_v1_comment_proto_init() }
func file_interface_comment_v1_comment_proto_init() {
	if File_interface_comment_v1_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interface_comment_v1_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloorAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Floor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByBelongReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByBelongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFloorBySubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFloorBySubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplyByFloorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplyByFloorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLikeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubjectResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByIdResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectByBelongResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplyResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFloorBySubjectResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReplyByFloorResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLikeResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelLikeResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interface_comment_v1_comment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLikeResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interface_comment_v1_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interface_comment_v1_comment_proto_goTypes,
		DependencyIndexes: file_interface_comment_v1_comment_proto_depIdxs,
		MessageInfos:      file_interface_comment_v1_comment_proto_msgTypes,
	}.Build()
	File_interface_comment_v1_comment_proto = out.File
	file_interface_comment_v1_comment_proto_rawDesc = nil
	file_interface_comment_v1_comment_proto_goTypes = nil
	file_interface_comment_v1_comment_proto_depIdxs = nil
}
