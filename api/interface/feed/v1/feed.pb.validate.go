// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interface/feed/v1/feed.proto

package interfacefeedv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Post with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Post) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Post with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PostMultiError, or nil if none found.
func (m *Post) ValidateAll() error {
	return m.validate(true)
}

func (m *Post) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetTitle()) > 100 {
		err := PostValidationError{
			field:  "Title",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) > 500 {
		err := PostValidationError{
			field:  "Content",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetType()) > 20 {
		err := PostValidationError{
			field:  "Type",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for LikeCount

	// no validation rules for ShareCount

	// no validation rules for FavorCount

	// no validation rules for ViewCount

	// no validation rules for CommentId

	if all {
		switch v := interface{}(m.GetAuthorInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "AuthorInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostValidationError{
					field:  "AuthorInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostValidationError{
				field:  "AuthorInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostMultiError(errors)
	}

	return nil
}

// PostMultiError is an error wrapping multiple validation errors returned by
// Post.ValidateAll() if the designated constraints aren't met.
type PostMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostMultiError) AllErrors() []error { return m }

// PostValidationError is the validation error returned by Post.Validate if the
// designated constraints aren't met.
type PostValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostValidationError) ErrorName() string { return "PostValidationError" }

// Error satisfies the builtin error interface
func (e PostValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPost.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostValidationError{}

// Validate checks the field values on PostCard with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostCardMultiError, or nil
// if none found.
func (m *PostCard) ValidateAll() error {
	return m.validate(true)
}

func (m *PostCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	if utf8.RuneCountInString(m.GetType()) > 20 {
		err := PostCardValidationError{
			field:  "Type",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) > 100 {
		err := PostCardValidationError{
			field:  "Title",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostCardValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LikeCount

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostCardValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetAuthorInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "AuthorInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostCardValidationError{
					field:  "AuthorInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthorInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostCardValidationError{
				field:  "AuthorInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostCardMultiError(errors)
	}

	return nil
}

// PostCardMultiError is an error wrapping multiple validation errors returned
// by PostCard.ValidateAll() if the designated constraints aren't met.
type PostCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostCardMultiError) AllErrors() []error { return m }

// PostCardValidationError is the validation error returned by
// PostCard.Validate if the designated constraints aren't met.
type PostCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostCardValidationError) ErrorName() string { return "PostCardValidationError" }

// Error satisfies the builtin error interface
func (e PostCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostCardValidationError{}

// Validate checks the field values on CreatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreatePostReqMultiError, or
// nil if none found.
func (m *CreatePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Type

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePostReqValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePostReqValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePostReqValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostReqValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePostReqValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePostReqValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePostReqValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostReqValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostReqValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostReqMultiError(errors)
	}

	return nil
}

// CreatePostReqMultiError is an error wrapping multiple validation errors
// returned by CreatePostReq.ValidateAll() if the designated constraints
// aren't met.
type CreatePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostReqMultiError) AllErrors() []error { return m }

// CreatePostReqValidationError is the validation error returned by
// CreatePostReq.Validate if the designated constraints aren't met.
type CreatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostReqValidationError) ErrorName() string { return "CreatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostReqValidationError{}

// Validate checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostResponseMultiError, or nil if none found.
func (m *CreatePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostResponseMultiError(errors)
	}

	return nil
}

// CreatePostResponseMultiError is an error wrapping multiple validation errors
// returned by CreatePostResponse.ValidateAll() if the designated constraints
// aren't met.
type CreatePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostResponseMultiError) AllErrors() []error { return m }

// CreatePostResponseValidationError is the validation error returned by
// CreatePostResponse.Validate if the designated constraints aren't met.
type CreatePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResponseValidationError) ErrorName() string {
	return "CreatePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResponseValidationError{}

// Validate checks the field values on GetPostByIdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetPostByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostByIdReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetPostByIdReqMultiError,
// or nil if none found.
func (m *GetPostByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPostByIdReqMultiError(errors)
	}

	return nil
}

// GetPostByIdReqMultiError is an error wrapping multiple validation errors
// returned by GetPostByIdReq.ValidateAll() if the designated constraints
// aren't met.
type GetPostByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostByIdReqMultiError) AllErrors() []error { return m }

// GetPostByIdReqValidationError is the validation error returned by
// GetPostByIdReq.Validate if the designated constraints aren't met.
type GetPostByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIdReqValidationError) ErrorName() string { return "GetPostByIdReqValidationError" }

// Error satisfies the builtin error interface
func (e GetPostByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIdReqValidationError{}

// Validate checks the field values on GetPostByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostByIdResponseMultiError, or nil if none found.
func (m *GetPostByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostByIdResponseMultiError(errors)
	}

	return nil
}

// GetPostByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetPostByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPostByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostByIdResponseMultiError) AllErrors() []error { return m }

// GetPostByIdResponseValidationError is the validation error returned by
// GetPostByIdResponse.Validate if the designated constraints aren't met.
type GetPostByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIdResponseValidationError) ErrorName() string {
	return "GetPostByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIdResponseValidationError{}

// Validate checks the field values on ListPostCardReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardReqMultiError, or nil if none found.
func (m *ListPostCardReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardReqValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardReqValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardReqValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardReqValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardReqValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardReqValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPostCardReqMultiError(errors)
	}

	return nil
}

// ListPostCardReqMultiError is an error wrapping multiple validation errors
// returned by ListPostCardReq.ValidateAll() if the designated constraints
// aren't met.
type ListPostCardReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardReqMultiError) AllErrors() []error { return m }

// ListPostCardReqValidationError is the validation error returned by
// ListPostCardReq.Validate if the designated constraints aren't met.
type ListPostCardReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardReqValidationError) ErrorName() string { return "ListPostCardReqValidationError" }

// Error satisfies the builtin error interface
func (e ListPostCardReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardReqValidationError{}

// Validate checks the field values on ListPostCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardResponseMultiError, or nil if none found.
func (m *ListPostCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPostCardResponseMultiError(errors)
	}

	return nil
}

// ListPostCardResponseMultiError is an error wrapping multiple validation
// errors returned by ListPostCardResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardResponseMultiError) AllErrors() []error { return m }

// ListPostCardResponseValidationError is the validation error returned by
// ListPostCardResponse.Validate if the designated constraints aren't met.
type ListPostCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardResponseValidationError) ErrorName() string {
	return "ListPostCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardResponseValidationError{}

// Validate checks the field values on ListPostCardByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsReqMultiError, or nil if none found.
func (m *ListPostCardByIdsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardByIdsReqValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardByIdsReqValidationError{
						field:  fmt.Sprintf("Ids[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardByIdsReqValidationError{
					field:  fmt.Sprintf("Ids[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPostCardByIdsReqMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsReqMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByIdsReq.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardByIdsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsReqMultiError) AllErrors() []error { return m }

// ListPostCardByIdsReqValidationError is the validation error returned by
// ListPostCardByIdsReq.Validate if the designated constraints aren't met.
type ListPostCardByIdsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsReqValidationError) ErrorName() string {
	return "ListPostCardByIdsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsReqValidationError{}

// Validate checks the field values on ListPostCardByIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsResponseMultiError, or nil if none found.
func (m *ListPostCardByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardByIdsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardByIdsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardByIdsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPostCardByIdsResponseMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByIdsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListPostCardByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsResponseMultiError) AllErrors() []error { return m }

// ListPostCardByIdsResponseValidationError is the validation error returned by
// ListPostCardByIdsResponse.Validate if the designated constraints aren't met.
type ListPostCardByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsResponseValidationError) ErrorName() string {
	return "ListPostCardByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsResponseValidationError{}

// Validate checks the field values on UpdatePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdatePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdatePostReqMultiError, or
// nil if none found.
func (m *UpdatePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdatePostReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostReqValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdatePostReqValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdatePostReqValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePostReqValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostReqValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostReqValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostReqMultiError(errors)
	}

	return nil
}

// UpdatePostReqMultiError is an error wrapping multiple validation errors
// returned by UpdatePostReq.ValidateAll() if the designated constraints
// aren't met.
type UpdatePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostReqMultiError) AllErrors() []error { return m }

// UpdatePostReqValidationError is the validation error returned by
// UpdatePostReq.Validate if the designated constraints aren't met.
type UpdatePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostReqValidationError) ErrorName() string { return "UpdatePostReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostReqValidationError{}

// Validate checks the field values on UpdatePostPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostPostResponseMultiError, or nil if none found.
func (m *UpdatePostPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdatePostPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdatePostPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePostPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdatePostPostResponseMultiError(errors)
	}

	return nil
}

// UpdatePostPostResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePostPostResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePostPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostPostResponseMultiError) AllErrors() []error { return m }

// UpdatePostPostResponseValidationError is the validation error returned by
// UpdatePostPostResponse.Validate if the designated constraints aren't met.
type UpdatePostPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostPostResponseValidationError) ErrorName() string {
	return "UpdatePostPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostPostResponseValidationError{}

// Validate checks the field values on DeletePostReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeletePostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeletePostReqMultiError, or
// nil if none found.
func (m *DeletePostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeletePostReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostReqMultiError(errors)
	}

	return nil
}

// DeletePostReqMultiError is an error wrapping multiple validation errors
// returned by DeletePostReq.ValidateAll() if the designated constraints
// aren't met.
type DeletePostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostReqMultiError) AllErrors() []error { return m }

// DeletePostReqValidationError is the validation error returned by
// DeletePostReq.Validate if the designated constraints aren't met.
type DeletePostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReqValidationError) ErrorName() string { return "DeletePostReqValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReqValidationError{}

// Validate checks the field values on DeletePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostResponseMultiError, or nil if none found.
func (m *DeletePostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeletePostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeletePostResponseMultiError(errors)
	}

	return nil
}

// DeletePostResponseMultiError is an error wrapping multiple validation errors
// returned by DeletePostResponse.ValidateAll() if the designated constraints
// aren't met.
type DeletePostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostResponseMultiError) AllErrors() []error { return m }

// DeletePostResponseValidationError is the validation error returned by
// DeletePostResponse.Validate if the designated constraints aren't met.
type DeletePostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostResponseValidationError) ErrorName() string {
	return "DeletePostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostResponseValidationError{}

// Validate checks the field values on ListVideoPostReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListVideoPostReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVideoPostReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVideoPostReqMultiError, or nil if none found.
func (m *ListVideoPostReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVideoPostReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVideoPostReqValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVideoPostReqValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVideoPostReqValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVideoPostReqValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVideoPostReqValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVideoPostReqValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVideoPostReqMultiError(errors)
	}

	return nil
}

// ListVideoPostReqMultiError is an error wrapping multiple validation errors
// returned by ListVideoPostReq.ValidateAll() if the designated constraints
// aren't met.
type ListVideoPostReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVideoPostReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVideoPostReqMultiError) AllErrors() []error { return m }

// ListVideoPostReqValidationError is the validation error returned by
// ListVideoPostReq.Validate if the designated constraints aren't met.
type ListVideoPostReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideoPostReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideoPostReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideoPostReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideoPostReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideoPostReqValidationError) ErrorName() string { return "ListVideoPostReqValidationError" }

// Error satisfies the builtin error interface
func (e ListVideoPostReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideoPostReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideoPostReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideoPostReqValidationError{}

// Validate checks the field values on ListVideoPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVideoPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVideoPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVideoPostResponseMultiError, or nil if none found.
func (m *ListVideoPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVideoPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVideoPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVideoPostResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVideoPostResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVideoPostResponseMultiError(errors)
	}

	return nil
}

// ListVideoPostResponseMultiError is an error wrapping multiple validation
// errors returned by ListVideoPostResponse.ValidateAll() if the designated
// constraints aren't met.
type ListVideoPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVideoPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVideoPostResponseMultiError) AllErrors() []error { return m }

// ListVideoPostResponseValidationError is the validation error returned by
// ListVideoPostResponse.Validate if the designated constraints aren't met.
type ListVideoPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideoPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideoPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideoPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideoPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideoPostResponseValidationError) ErrorName() string {
	return "ListVideoPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVideoPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideoPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideoPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideoPostResponseValidationError{}

// Validate checks the field values on AddLikeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddLikeReqMultiError, or
// nil if none found.
func (m *AddLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddLikeReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddLikeReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddLikeReqMultiError(errors)
	}

	return nil
}

// AddLikeReqMultiError is an error wrapping multiple validation errors
// returned by AddLikeReq.ValidateAll() if the designated constraints aren't met.
type AddLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeReqMultiError) AllErrors() []error { return m }

// AddLikeReqValidationError is the validation error returned by
// AddLikeReq.Validate if the designated constraints aren't met.
type AddLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeReqValidationError) ErrorName() string { return "AddLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e AddLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeReqValidationError{}

// Validate checks the field values on AddLikeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLikeResponseMultiError, or nil if none found.
func (m *AddLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddLikeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddLikeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLikeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddLikeResponseMultiError(errors)
	}

	return nil
}

// AddLikeResponseMultiError is an error wrapping multiple validation errors
// returned by AddLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type AddLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeResponseMultiError) AllErrors() []error { return m }

// AddLikeResponseValidationError is the validation error returned by
// AddLikeResponse.Validate if the designated constraints aren't met.
type AddLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeResponseValidationError) ErrorName() string { return "AddLikeResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeResponseValidationError{}

// Validate checks the field values on CancelLikeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelLikeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelLikeReqMultiError, or
// nil if none found.
func (m *CancelLikeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelLikeReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelLikeReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelLikeReqMultiError(errors)
	}

	return nil
}

// CancelLikeReqMultiError is an error wrapping multiple validation errors
// returned by CancelLikeReq.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeReqMultiError) AllErrors() []error { return m }

// CancelLikeReqValidationError is the validation error returned by
// CancelLikeReq.Validate if the designated constraints aren't met.
type CancelLikeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeReqValidationError) ErrorName() string { return "CancelLikeReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelLikeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeReqValidationError{}

// Validate checks the field values on CancelLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelLikeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelLikeResponseMultiError, or nil if none found.
func (m *CancelLikeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelLikeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelLikeResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelLikeResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelLikeResponseMultiError(errors)
	}

	return nil
}

// CancelLikeResponseMultiError is an error wrapping multiple validation errors
// returned by CancelLikeResponse.ValidateAll() if the designated constraints
// aren't met.
type CancelLikeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeResponseMultiError) AllErrors() []error { return m }

// CancelLikeResponseValidationError is the validation error returned by
// CancelLikeResponse.Validate if the designated constraints aren't met.
type CancelLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeResponseValidationError) ErrorName() string {
	return "CancelLikeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeResponseValidationError{}

// Validate checks the field values on AddShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddShareReqMultiError, or
// nil if none found.
func (m *AddShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddShareReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddShareReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddShareReqMultiError(errors)
	}

	return nil
}

// AddShareReqMultiError is an error wrapping multiple validation errors
// returned by AddShareReq.ValidateAll() if the designated constraints aren't met.
type AddShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareReqMultiError) AllErrors() []error { return m }

// AddShareReqValidationError is the validation error returned by
// AddShareReq.Validate if the designated constraints aren't met.
type AddShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareReqValidationError) ErrorName() string { return "AddShareReqValidationError" }

// Error satisfies the builtin error interface
func (e AddShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareReqValidationError{}

// Validate checks the field values on AddShareResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShareResponseMultiError, or nil if none found.
func (m *AddShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddShareResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddShareResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddShareResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddShareResponseMultiError(errors)
	}

	return nil
}

// AddShareResponseMultiError is an error wrapping multiple validation errors
// returned by AddShareResponse.ValidateAll() if the designated constraints
// aren't met.
type AddShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareResponseMultiError) AllErrors() []error { return m }

// AddShareResponseValidationError is the validation error returned by
// AddShareResponse.Validate if the designated constraints aren't met.
type AddShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareResponseValidationError) ErrorName() string { return "AddShareResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareResponseValidationError{}

// Validate checks the field values on CancelShareReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelShareReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelShareReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelShareReqMultiError,
// or nil if none found.
func (m *CancelShareReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelShareReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelShareReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelShareReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelShareReqMultiError(errors)
	}

	return nil
}

// CancelShareReqMultiError is an error wrapping multiple validation errors
// returned by CancelShareReq.ValidateAll() if the designated constraints
// aren't met.
type CancelShareReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelShareReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelShareReqMultiError) AllErrors() []error { return m }

// CancelShareReqValidationError is the validation error returned by
// CancelShareReq.Validate if the designated constraints aren't met.
type CancelShareReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelShareReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelShareReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelShareReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelShareReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelShareReqValidationError) ErrorName() string { return "CancelShareReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelShareReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelShareReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelShareReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelShareReqValidationError{}

// Validate checks the field values on CancelShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelShareResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelShareResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelShareResponseMultiError, or nil if none found.
func (m *CancelShareResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelShareResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelShareResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelShareResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelShareResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelShareResponseMultiError(errors)
	}

	return nil
}

// CancelShareResponseMultiError is an error wrapping multiple validation
// errors returned by CancelShareResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelShareResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelShareResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelShareResponseMultiError) AllErrors() []error { return m }

// CancelShareResponseValidationError is the validation error returned by
// CancelShareResponse.Validate if the designated constraints aren't met.
type CancelShareResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelShareResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelShareResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelShareResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelShareResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelShareResponseValidationError) ErrorName() string {
	return "CancelShareResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelShareResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelShareResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelShareResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelShareResponseValidationError{}

// Validate checks the field values on AddFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddFavorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddFavorReqMultiError, or
// nil if none found.
func (m *AddFavorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFavorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := AddFavorReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := AddFavorReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFavorReqMultiError(errors)
	}

	return nil
}

// AddFavorReqMultiError is an error wrapping multiple validation errors
// returned by AddFavorReq.ValidateAll() if the designated constraints aren't met.
type AddFavorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFavorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFavorReqMultiError) AllErrors() []error { return m }

// AddFavorReqValidationError is the validation error returned by
// AddFavorReq.Validate if the designated constraints aren't met.
type AddFavorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFavorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFavorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFavorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFavorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFavorReqValidationError) ErrorName() string { return "AddFavorReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFavorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFavorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFavorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFavorReqValidationError{}

// Validate checks the field values on AddFavorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddFavorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFavorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFavorResponseMultiError, or nil if none found.
func (m *AddFavorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFavorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFavorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFavorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFavorResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFavorResponseMultiError(errors)
	}

	return nil
}

// AddFavorResponseMultiError is an error wrapping multiple validation errors
// returned by AddFavorResponse.ValidateAll() if the designated constraints
// aren't met.
type AddFavorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFavorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFavorResponseMultiError) AllErrors() []error { return m }

// AddFavorResponseValidationError is the validation error returned by
// AddFavorResponse.Validate if the designated constraints aren't met.
type AddFavorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFavorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFavorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFavorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFavorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFavorResponseValidationError) ErrorName() string { return "AddFavorResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddFavorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFavorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFavorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFavorResponseValidationError{}

// Validate checks the field values on CancelFavorReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelFavorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFavorReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelFavorReqMultiError,
// or nil if none found.
func (m *CancelFavorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFavorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() <= 0 {
		err := CancelFavorReqValidationError{
			field:  "PostId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() <= 0 {
		err := CancelFavorReqValidationError{
			field:  "Uid",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CancelFavorReqMultiError(errors)
	}

	return nil
}

// CancelFavorReqMultiError is an error wrapping multiple validation errors
// returned by CancelFavorReq.ValidateAll() if the designated constraints
// aren't met.
type CancelFavorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFavorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFavorReqMultiError) AllErrors() []error { return m }

// CancelFavorReqValidationError is the validation error returned by
// CancelFavorReq.Validate if the designated constraints aren't met.
type CancelFavorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFavorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFavorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFavorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFavorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFavorReqValidationError) ErrorName() string { return "CancelFavorReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelFavorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFavorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFavorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFavorReqValidationError{}

// Validate checks the field values on CancelFavorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelFavorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFavorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFavorResponseMultiError, or nil if none found.
func (m *CancelFavorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFavorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelFavorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelFavorResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelFavorResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelFavorResponseMultiError(errors)
	}

	return nil
}

// CancelFavorResponseMultiError is an error wrapping multiple validation
// errors returned by CancelFavorResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelFavorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFavorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFavorResponseMultiError) AllErrors() []error { return m }

// CancelFavorResponseValidationError is the validation error returned by
// CancelFavorResponse.Validate if the designated constraints aren't met.
type CancelFavorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFavorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFavorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFavorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFavorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFavorResponseValidationError) ErrorName() string {
	return "CancelFavorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFavorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFavorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFavorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFavorResponseValidationError{}

// Validate checks the field values on CreatePostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostResponse_DataMultiError, or nil if none found.
func (m *CreatePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePostResponse_DataMultiError(errors)
	}

	return nil
}

// CreatePostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CreatePostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreatePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostResponse_DataMultiError) AllErrors() []error { return m }

// CreatePostResponse_DataValidationError is the validation error returned by
// CreatePostResponse_Data.Validate if the designated constraints aren't met.
type CreatePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostResponse_DataValidationError) ErrorName() string {
	return "CreatePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostResponse_DataValidationError{}

// Validate checks the field values on GetPostByIdResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostByIdResponse_DataMultiError, or nil if none found.
func (m *GetPostByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostByIdResponse_DataValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostByIdResponse_DataValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostByIdResponse_DataValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetPostByIdResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetPostByIdResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetPostByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetPostByIdResponse_DataValidationError is the validation error returned by
// GetPostByIdResponse_Data.Validate if the designated constraints aren't met.
type GetPostByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIdResponse_DataValidationError) ErrorName() string {
	return "GetPostByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIdResponse_DataValidationError{}

// Validate checks the field values on ListPostCardResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardResponse_DataMultiError, or nil if none found.
func (m *ListPostCardResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardResponse_DataValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardResponse_DataValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardResponse_DataValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardResponse_DataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPostCardResponse_DataMultiError(errors)
	}

	return nil
}

// ListPostCardResponse_DataMultiError is an error wrapping multiple validation
// errors returned by ListPostCardResponse_Data.ValidateAll() if the
// designated constraints aren't met.
type ListPostCardResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardResponse_DataMultiError) AllErrors() []error { return m }

// ListPostCardResponse_DataValidationError is the validation error returned by
// ListPostCardResponse_Data.Validate if the designated constraints aren't met.
type ListPostCardResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardResponse_DataValidationError) ErrorName() string {
	return "ListPostCardResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardResponse_DataValidationError{}

// Validate checks the field values on ListPostCardByIdsReq_Id with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsReq_Id) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsReq_Id with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsReq_IdMultiError, or nil if none found.
func (m *ListPostCardByIdsReq_Id) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsReq_Id) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListPostCardByIdsReq_IdMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsReq_IdMultiError is an error wrapping multiple validation
// errors returned by ListPostCardByIdsReq_Id.ValidateAll() if the designated
// constraints aren't met.
type ListPostCardByIdsReq_IdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsReq_IdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsReq_IdMultiError) AllErrors() []error { return m }

// ListPostCardByIdsReq_IdValidationError is the validation error returned by
// ListPostCardByIdsReq_Id.Validate if the designated constraints aren't met.
type ListPostCardByIdsReq_IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsReq_IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsReq_IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsReq_IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsReq_IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsReq_IdValidationError) ErrorName() string {
	return "ListPostCardByIdsReq_IdValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsReq_IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsReq_Id.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsReq_IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsReq_IdValidationError{}

// Validate checks the field values on ListPostCardByIdsResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostCardByIdsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostCardByIdsResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPostCardByIdsResponse_DataMultiError, or nil if none found.
func (m *ListPostCardByIdsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostCardByIdsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPostCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostCardByIdsResponse_DataValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostCardByIdsResponse_DataValidationError{
						field:  fmt.Sprintf("PostCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostCardByIdsResponse_DataValidationError{
					field:  fmt.Sprintf("PostCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPostCardByIdsResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPostCardByIdsResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPostCardByIdsResponse_DataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPostCardByIdsResponse_DataMultiError(errors)
	}

	return nil
}

// ListPostCardByIdsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ListPostCardByIdsResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type ListPostCardByIdsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostCardByIdsResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostCardByIdsResponse_DataMultiError) AllErrors() []error { return m }

// ListPostCardByIdsResponse_DataValidationError is the validation error
// returned by ListPostCardByIdsResponse_Data.Validate if the designated
// constraints aren't met.
type ListPostCardByIdsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostCardByIdsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostCardByIdsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostCardByIdsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostCardByIdsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostCardByIdsResponse_DataValidationError) ErrorName() string {
	return "ListPostCardByIdsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostCardByIdsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostCardByIdsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostCardByIdsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostCardByIdsResponse_DataValidationError{}

// Validate checks the field values on UpdatePostPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostPostResponse_DataMultiError, or nil if none found.
func (m *UpdatePostPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePostPostResponse_DataMultiError(errors)
	}

	return nil
}

// UpdatePostPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by UpdatePostPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type UpdatePostPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostPostResponse_DataMultiError) AllErrors() []error { return m }

// UpdatePostPostResponse_DataValidationError is the validation error returned
// by UpdatePostPostResponse_Data.Validate if the designated constraints
// aren't met.
type UpdatePostPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostPostResponse_DataValidationError) ErrorName() string {
	return "UpdatePostPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostPostResponse_DataValidationError{}

// Validate checks the field values on DeletePostResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostResponse_DataMultiError, or nil if none found.
func (m *DeletePostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePostResponse_DataMultiError(errors)
	}

	return nil
}

// DeletePostResponse_DataMultiError is an error wrapping multiple validation
// errors returned by DeletePostResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type DeletePostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostResponse_DataMultiError) AllErrors() []error { return m }

// DeletePostResponse_DataValidationError is the validation error returned by
// DeletePostResponse_Data.Validate if the designated constraints aren't met.
type DeletePostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostResponse_DataValidationError) ErrorName() string {
	return "DeletePostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostResponse_DataValidationError{}

// Validate checks the field values on ListVideoPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVideoPostResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVideoPostResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVideoPostResponse_DataMultiError, or nil if none found.
func (m *ListVideoPostResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVideoPostResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVideoPostResponse_DataValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVideoPostResponse_DataValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVideoPostResponse_DataValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVideoPostResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVideoPostResponse_DataValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVideoPostResponse_DataValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVideoPostResponse_DataMultiError(errors)
	}

	return nil
}

// ListVideoPostResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ListVideoPostResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type ListVideoPostResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVideoPostResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVideoPostResponse_DataMultiError) AllErrors() []error { return m }

// ListVideoPostResponse_DataValidationError is the validation error returned
// by ListVideoPostResponse_Data.Validate if the designated constraints aren't met.
type ListVideoPostResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVideoPostResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVideoPostResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVideoPostResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVideoPostResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVideoPostResponse_DataValidationError) ErrorName() string {
	return "ListVideoPostResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListVideoPostResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVideoPostResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVideoPostResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVideoPostResponse_DataValidationError{}

// Validate checks the field values on AddLikeResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddLikeResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddLikeResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddLikeResponse_DataMultiError, or nil if none found.
func (m *AddLikeResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AddLikeResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddLikeResponse_DataMultiError(errors)
	}

	return nil
}

// AddLikeResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AddLikeResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AddLikeResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddLikeResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddLikeResponse_DataMultiError) AllErrors() []error { return m }

// AddLikeResponse_DataValidationError is the validation error returned by
// AddLikeResponse_Data.Validate if the designated constraints aren't met.
type AddLikeResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLikeResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLikeResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLikeResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLikeResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLikeResponse_DataValidationError) ErrorName() string {
	return "AddLikeResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddLikeResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLikeResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLikeResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLikeResponse_DataValidationError{}

// Validate checks the field values on CancelLikeResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelLikeResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelLikeResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelLikeResponse_DataMultiError, or nil if none found.
func (m *CancelLikeResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelLikeResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelLikeResponse_DataMultiError(errors)
	}

	return nil
}

// CancelLikeResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CancelLikeResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CancelLikeResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelLikeResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelLikeResponse_DataMultiError) AllErrors() []error { return m }

// CancelLikeResponse_DataValidationError is the validation error returned by
// CancelLikeResponse_Data.Validate if the designated constraints aren't met.
type CancelLikeResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelLikeResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelLikeResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelLikeResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelLikeResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelLikeResponse_DataValidationError) ErrorName() string {
	return "CancelLikeResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CancelLikeResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelLikeResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelLikeResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelLikeResponse_DataValidationError{}

// Validate checks the field values on AddShareResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddShareResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddShareResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddShareResponse_DataMultiError, or nil if none found.
func (m *AddShareResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AddShareResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddShareResponse_DataValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddShareResponse_DataMultiError(errors)
	}

	return nil
}

// AddShareResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AddShareResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AddShareResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddShareResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddShareResponse_DataMultiError) AllErrors() []error { return m }

// AddShareResponse_DataValidationError is the validation error returned by
// AddShareResponse_Data.Validate if the designated constraints aren't met.
type AddShareResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddShareResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddShareResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddShareResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddShareResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddShareResponse_DataValidationError) ErrorName() string {
	return "AddShareResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddShareResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddShareResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddShareResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddShareResponse_DataValidationError{}

// Validate checks the field values on CancelShareResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelShareResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelShareResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelShareResponse_DataMultiError, or nil if none found.
func (m *CancelShareResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelShareResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelShareResponse_DataMultiError(errors)
	}

	return nil
}

// CancelShareResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CancelShareResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CancelShareResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelShareResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelShareResponse_DataMultiError) AllErrors() []error { return m }

// CancelShareResponse_DataValidationError is the validation error returned by
// CancelShareResponse_Data.Validate if the designated constraints aren't met.
type CancelShareResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelShareResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelShareResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelShareResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelShareResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelShareResponse_DataValidationError) ErrorName() string {
	return "CancelShareResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CancelShareResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelShareResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelShareResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelShareResponse_DataValidationError{}

// Validate checks the field values on AddFavorResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFavorResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFavorResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFavorResponse_DataMultiError, or nil if none found.
func (m *AddFavorResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFavorResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AddFavorResponse_DataValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddFavorResponse_DataMultiError(errors)
	}

	return nil
}

// AddFavorResponse_DataMultiError is an error wrapping multiple validation
// errors returned by AddFavorResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type AddFavorResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFavorResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFavorResponse_DataMultiError) AllErrors() []error { return m }

// AddFavorResponse_DataValidationError is the validation error returned by
// AddFavorResponse_Data.Validate if the designated constraints aren't met.
type AddFavorResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFavorResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFavorResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFavorResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFavorResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFavorResponse_DataValidationError) ErrorName() string {
	return "AddFavorResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e AddFavorResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFavorResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFavorResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFavorResponse_DataValidationError{}

// Validate checks the field values on CancelFavorResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelFavorResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelFavorResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelFavorResponse_DataMultiError, or nil if none found.
func (m *CancelFavorResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelFavorResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelFavorResponse_DataMultiError(errors)
	}

	return nil
}

// CancelFavorResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CancelFavorResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CancelFavorResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelFavorResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelFavorResponse_DataMultiError) AllErrors() []error { return m }

// CancelFavorResponse_DataValidationError is the validation error returned by
// CancelFavorResponse_Data.Validate if the designated constraints aren't met.
type CancelFavorResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelFavorResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelFavorResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelFavorResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelFavorResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelFavorResponse_DataValidationError) ErrorName() string {
	return "CancelFavorResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CancelFavorResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelFavorResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelFavorResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelFavorResponse_DataValidationError{}
