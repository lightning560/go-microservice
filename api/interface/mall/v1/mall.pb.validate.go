// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: interface/mall/v1/mall.proto

package interfacemallv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Shop with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Shop) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shop with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShopMultiError, or nil if none found.
func (m *Shop) ValidateAll() error {
	return m.validate(true)
}

func (m *Shop) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for Name

	// no validation rules for Sign

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShopValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShopValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShopValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ShopMultiError(errors)
	}

	return nil
}

// ShopMultiError is an error wrapping multiple validation errors returned by
// Shop.ValidateAll() if the designated constraints aren't met.
type ShopMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShopMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShopMultiError) AllErrors() []error { return m }

// ShopValidationError is the validation error returned by Shop.Validate if the
// designated constraints aren't met.
type ShopValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShopValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShopValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShopValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShopValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShopValidationError) ErrorName() string { return "ShopValidationError" }

// Error satisfies the builtin error interface
func (e ShopValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShop.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShopValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShopValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetThumb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThumb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "Thumb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOverview() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Overview[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Overview[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  fmt.Sprintf("Overview[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Specs

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Inventory

	// no validation rules for State

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for PublishAt

	// no validation rules for Version

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on CreateProduct with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateProduct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProduct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateProductMultiError, or
// nil if none found.
func (m *CreateProduct) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProduct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetThumb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThumb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductValidationError{
				field:  "Thumb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProductValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOverview() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Overview[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Overview[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProductValidationError{
					field:  fmt.Sprintf("Overview[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Specs

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateProductValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateProductValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Inventory

	// no validation rules for PublishAt

	if len(errors) > 0 {
		return CreateProductMultiError(errors)
	}

	return nil
}

// CreateProductMultiError is an error wrapping multiple validation errors
// returned by CreateProduct.ValidateAll() if the designated constraints
// aren't met.
type CreateProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductMultiError) AllErrors() []error { return m }

// CreateProductValidationError is the validation error returned by
// CreateProduct.Validate if the designated constraints aren't met.
type CreateProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductValidationError) ErrorName() string { return "CreateProductValidationError" }

// Error satisfies the builtin error interface
func (e CreateProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductValidationError{}

// Validate checks the field values on ProductCard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCard with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductCardMultiError, or
// nil if none found.
func (m *ProductCard) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetThumb()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCardValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCardValidationError{
					field:  "Thumb",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThumb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCardValidationError{
				field:  "Thumb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCardValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCardValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCardValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductCardValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for PublishAt

	// no validation rules for Version

	if len(errors) > 0 {
		return ProductCardMultiError(errors)
	}

	return nil
}

// ProductCardMultiError is an error wrapping multiple validation errors
// returned by ProductCard.ValidateAll() if the designated constraints aren't met.
type ProductCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCardMultiError) AllErrors() []error { return m }

// ProductCardValidationError is the validation error returned by
// ProductCard.Validate if the designated constraints aren't met.
type ProductCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCardValidationError) ErrorName() string { return "ProductCardValidationError" }

// Error satisfies the builtin error interface
func (e ProductCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCardValidationError{}

// Validate checks the field values on Sku with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sku) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sku with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SkuMultiError, or nil if none found.
func (m *Sku) ValidateAll() error {
	return m.validate(true)
}

func (m *Sku) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Name

	// no validation rules for ProductId

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SkuValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SkuValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SkuValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SkuMultiError(errors)
	}

	return nil
}

// SkuMultiError is an error wrapping multiple validation errors returned by
// Sku.ValidateAll() if the designated constraints aren't met.
type SkuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuMultiError) AllErrors() []error { return m }

// SkuValidationError is the validation error returned by Sku.Validate if the
// designated constraints aren't met.
type SkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuValidationError) ErrorName() string { return "SkuValidationError" }

// Error satisfies the builtin error interface
func (e SkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuValidationError{}

// Validate checks the field values on SkuOnlyId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SkuOnlyId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkuOnlyId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SkuOnlyIdMultiError, or nil
// if none found.
func (m *SkuOnlyId) ValidateAll() error {
	return m.validate(true)
}

func (m *SkuOnlyId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	// no validation rules for Name

	// no validation rules for ProductId

	if len(errors) > 0 {
		return SkuOnlyIdMultiError(errors)
	}

	return nil
}

// SkuOnlyIdMultiError is an error wrapping multiple validation errors returned
// by SkuOnlyId.ValidateAll() if the designated constraints aren't met.
type SkuOnlyIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkuOnlyIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkuOnlyIdMultiError) AllErrors() []error { return m }

// SkuOnlyIdValidationError is the validation error returned by
// SkuOnlyId.Validate if the designated constraints aren't met.
type SkuOnlyIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkuOnlyIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkuOnlyIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkuOnlyIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkuOnlyIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkuOnlyIdValidationError) ErrorName() string { return "SkuOnlyIdValidationError" }

// Error satisfies the builtin error interface
func (e SkuOnlyIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkuOnlyId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkuOnlyIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkuOnlyIdValidationError{}

// Validate checks the field values on Collection with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Collection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Collection with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionMultiError, or
// nil if none found.
func (m *Collection) ValidateAll() error {
	return m.validate(true)
}

func (m *Collection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for PublishAt

	// no validation rules for Version

	for idx, item := range m.GetSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionValidationError{
						field:  fmt.Sprintf("Skus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionValidationError{
					field:  fmt.Sprintf("Skus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CollectionMultiError(errors)
	}

	return nil
}

// CollectionMultiError is an error wrapping multiple validation errors
// returned by Collection.ValidateAll() if the designated constraints aren't met.
type CollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionMultiError) AllErrors() []error { return m }

// CollectionValidationError is the validation error returned by
// Collection.Validate if the designated constraints aren't met.
type CollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionValidationError) ErrorName() string { return "CollectionValidationError" }

// Error satisfies the builtin error interface
func (e CollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionValidationError{}

// Validate checks the field values on CreateCollection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCollection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionMultiError, or nil if none found.
func (m *CreateCollection) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCollectionValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCollectionValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCollectionValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PublishAt

	for idx, item := range m.GetSkusOnlyId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCollectionValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCollectionValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCollectionValidationError{
					field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCollectionMultiError(errors)
	}

	return nil
}

// CreateCollectionMultiError is an error wrapping multiple validation errors
// returned by CreateCollection.ValidateAll() if the designated constraints
// aren't met.
type CreateCollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionMultiError) AllErrors() []error { return m }

// CreateCollectionValidationError is the validation error returned by
// CreateCollection.Validate if the designated constraints aren't met.
type CreateCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionValidationError) ErrorName() string { return "CreateCollectionValidationError" }

// Error satisfies the builtin error interface
func (e CreateCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionValidationError{}

// Validate checks the field values on CollectionCard with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollectionCard) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollectionCard with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollectionCardMultiError,
// or nil if none found.
func (m *CollectionCard) ValidateAll() error {
	return m.validate(true)
}

func (m *CollectionCard) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCardValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCardValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CollectionCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CollectionCardValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CollectionCardValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for State

	// no validation rules for Version

	// no validation rules for PublishAt

	// no validation rules for ProductId

	if all {
		switch v := interface{}(m.GetProductCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "ProductCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CollectionCardValidationError{
					field:  "ProductCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CollectionCardValidationError{
				field:  "ProductCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CollectionCardMultiError(errors)
	}

	return nil
}

// CollectionCardMultiError is an error wrapping multiple validation errors
// returned by CollectionCard.ValidateAll() if the designated constraints
// aren't met.
type CollectionCardMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollectionCardMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollectionCardMultiError) AllErrors() []error { return m }

// CollectionCardValidationError is the validation error returned by
// CollectionCard.Validate if the designated constraints aren't met.
type CollectionCardValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollectionCardValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollectionCardValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollectionCardValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollectionCardValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollectionCardValidationError) ErrorName() string { return "CollectionCardValidationError" }

// Error satisfies the builtin error interface
func (e CollectionCardValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollectionCard.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollectionCardValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollectionCardValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for CollectionId

	// no validation rules for ProductId

	// no validation rules for Quantity

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if all {
		switch v := interface{}(m.GetProductCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "ProductCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "ProductCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CartItemValidationError{
				field:  "ProductCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on CreateShopRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateShopRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopRequestMultiError, or nil if none found.
func (m *CreateShopRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShopRequestValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShopRequestValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShopRequestValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Sign

	if len(errors) > 0 {
		return CreateShopRequestMultiError(errors)
	}

	return nil
}

// CreateShopRequestMultiError is an error wrapping multiple validation errors
// returned by CreateShopRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateShopRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopRequestMultiError) AllErrors() []error { return m }

// CreateShopRequestValidationError is the validation error returned by
// CreateShopRequest.Validate if the designated constraints aren't met.
type CreateShopRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopRequestValidationError) ErrorName() string {
	return "CreateShopRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopRequestValidationError{}

// Validate checks the field values on CreateShopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShopResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopResponseMultiError, or nil if none found.
func (m *CreateShopResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShopResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShopResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShopResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShopResponseMultiError(errors)
	}

	return nil
}

// CreateShopResponseMultiError is an error wrapping multiple validation errors
// returned by CreateShopResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateShopResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopResponseMultiError) AllErrors() []error { return m }

// CreateShopResponseValidationError is the validation error returned by
// CreateShopResponse.Validate if the designated constraints aren't met.
type CreateShopResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopResponseValidationError) ErrorName() string {
	return "CreateShopResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopResponseValidationError{}

// Validate checks the field values on GetShopByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShopByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShopByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShopByIdRequestMultiError, or nil if none found.
func (m *GetShopByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShopByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetShopByIdRequestMultiError(errors)
	}

	return nil
}

// GetShopByIdRequestMultiError is an error wrapping multiple validation errors
// returned by GetShopByIdRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShopByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShopByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShopByIdRequestMultiError) AllErrors() []error { return m }

// GetShopByIdRequestValidationError is the validation error returned by
// GetShopByIdRequest.Validate if the designated constraints aren't met.
type GetShopByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopByIdRequestValidationError) ErrorName() string {
	return "GetShopByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopByIdRequestValidationError{}

// Validate checks the field values on GetShopByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShopByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShopByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShopByIdResponseMultiError, or nil if none found.
func (m *GetShopByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShopByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShopByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShopByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShopByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShopByIdResponseMultiError(errors)
	}

	return nil
}

// GetShopByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetShopByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShopByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShopByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShopByIdResponseMultiError) AllErrors() []error { return m }

// GetShopByIdResponseValidationError is the validation error returned by
// GetShopByIdResponse.Validate if the designated constraints aren't met.
type GetShopByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopByIdResponseValidationError) ErrorName() string {
	return "GetShopByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopByIdResponseValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "CreateProduct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductRequestValidationError{
					field:  "CreateProduct",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductRequestValidationError{
				field:  "CreateProduct",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProductResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProductResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdRequestMultiError, or nil if none found.
func (m *GetProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetProductByIdRequestMultiError(errors)
	}

	return nil
}

// GetProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdRequestMultiError) AllErrors() []error { return m }

// GetProductByIdRequestValidationError is the validation error returned by
// GetProductByIdRequest.Validate if the designated constraints aren't met.
type GetProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdRequestValidationError) ErrorName() string {
	return "GetProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdRequestValidationError{}

// Validate checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdResponseMultiError, or nil if none found.
func (m *GetProductByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductByIdResponseMultiError(errors)
	}

	return nil
}

// GetProductByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdResponseMultiError) AllErrors() []error { return m }

// GetProductByIdResponseValidationError is the validation error returned by
// GetProductByIdResponse.Validate if the designated constraints aren't met.
type GetProductByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdResponseValidationError) ErrorName() string {
	return "GetProductByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdResponseValidationError{}

// Validate checks the field values on CreateCollectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionRequestMultiError, or nil if none found.
func (m *CreateCollectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShopId

	// no validation rules for Name

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCover()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Cover",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCover()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionRequestValidationError{
				field:  "Cover",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionRequestValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCollectionRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCollectionRequestValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCollectionRequestValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PublishAt

	for idx, item := range m.GetSkusOnlyId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateCollectionRequestValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateCollectionRequestValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateCollectionRequestValidationError{
					field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateCollectionRequestMultiError(errors)
	}

	return nil
}

// CreateCollectionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionRequestMultiError) AllErrors() []error { return m }

// CreateCollectionRequestValidationError is the validation error returned by
// CreateCollectionRequest.Validate if the designated constraints aren't met.
type CreateCollectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionRequestValidationError) ErrorName() string {
	return "CreateCollectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionRequestValidationError{}

// Validate checks the field values on CreateCollectionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCollectionResponseMultiError, or nil if none found.
func (m *CreateCollectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCollectionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCollectionResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCollectionResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCollectionResponseMultiError(errors)
	}

	return nil
}

// CreateCollectionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCollectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCollectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionResponseMultiError) AllErrors() []error { return m }

// CreateCollectionResponseValidationError is the validation error returned by
// CreateCollectionResponse.Validate if the designated constraints aren't met.
type CreateCollectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionResponseValidationError) ErrorName() string {
	return "CreateCollectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionResponseValidationError{}

// Validate checks the field values on GetCollectionByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionByIdRequestMultiError, or nil if none found.
func (m *GetCollectionByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectionByIdRequestMultiError(errors)
	}

	return nil
}

// GetCollectionByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCollectionByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionByIdRequestMultiError) AllErrors() []error { return m }

// GetCollectionByIdRequestValidationError is the validation error returned by
// GetCollectionByIdRequest.Validate if the designated constraints aren't met.
type GetCollectionByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionByIdRequestValidationError) ErrorName() string {
	return "GetCollectionByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionByIdRequestValidationError{}

// Validate checks the field values on GetCollectionByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionByIdResponseMultiError, or nil if none found.
func (m *GetCollectionByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionByIdResponseMultiError(errors)
	}

	return nil
}

// GetCollectionByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetCollectionByIdResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCollectionByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionByIdResponseMultiError) AllErrors() []error { return m }

// GetCollectionByIdResponseValidationError is the validation error returned by
// GetCollectionByIdResponse.Validate if the designated constraints aren't met.
type GetCollectionByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionByIdResponseValidationError) ErrorName() string {
	return "GetCollectionByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionByIdResponseValidationError{}

// Validate checks the field values on GetCollectionCardByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionCardByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionCardByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCollectionCardByIdRequestMultiError, or nil if none found.
func (m *GetCollectionCardByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionCardByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCollectionCardByIdRequestMultiError(errors)
	}

	return nil
}

// GetCollectionCardByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetCollectionCardByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCollectionCardByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionCardByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionCardByIdRequestMultiError) AllErrors() []error { return m }

// GetCollectionCardByIdRequestValidationError is the validation error returned
// by GetCollectionCardByIdRequest.Validate if the designated constraints
// aren't met.
type GetCollectionCardByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionCardByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionCardByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionCardByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionCardByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionCardByIdRequestValidationError) ErrorName() string {
	return "GetCollectionCardByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionCardByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionCardByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionCardByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionCardByIdRequestValidationError{}

// Validate checks the field values on GetCollectionCardByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionCardByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionCardByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionCardByIdResponseMultiError, or nil if none found.
func (m *GetCollectionCardByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionCardByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionCardByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionCardByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionCardByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionCardByIdResponseMultiError(errors)
	}

	return nil
}

// GetCollectionCardByIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetCollectionCardByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionCardByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionCardByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionCardByIdResponseMultiError) AllErrors() []error { return m }

// GetCollectionCardByIdResponseValidationError is the validation error
// returned by GetCollectionCardByIdResponse.Validate if the designated
// constraints aren't met.
type GetCollectionCardByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionCardByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionCardByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionCardByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionCardByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionCardByIdResponseValidationError) ErrorName() string {
	return "GetCollectionCardByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionCardByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionCardByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionCardByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionCardByIdResponseValidationError{}

// Validate checks the field values on ListCollectionCardByIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCollectionCardByIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByIdsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByIdsRequestMultiError, or nil if none found.
func (m *ListCollectionCardByIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCollectionCardByIdsRequestMultiError(errors)
	}

	return nil
}

// ListCollectionCardByIdsRequestMultiError is an error wrapping multiple
// validation errors returned by ListCollectionCardByIdsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListCollectionCardByIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByIdsRequestMultiError) AllErrors() []error { return m }

// ListCollectionCardByIdsRequestValidationError is the validation error
// returned by ListCollectionCardByIdsRequest.Validate if the designated
// constraints aren't met.
type ListCollectionCardByIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByIdsRequestValidationError) ErrorName() string {
	return "ListCollectionCardByIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByIdsRequestValidationError{}

// Validate checks the field values on ListCollectionCardByIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCollectionCardByIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByIdsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByIdsResponseMultiError, or nil if none found.
func (m *ListCollectionCardByIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCollectionCardByIdsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCollectionCardByIdsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCollectionCardByIdsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCollectionCardByIdsResponseMultiError(errors)
	}

	return nil
}

// ListCollectionCardByIdsResponseMultiError is an error wrapping multiple
// validation errors returned by ListCollectionCardByIdsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCollectionCardByIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByIdsResponseMultiError) AllErrors() []error { return m }

// ListCollectionCardByIdsResponseValidationError is the validation error
// returned by ListCollectionCardByIdsResponse.Validate if the designated
// constraints aren't met.
type ListCollectionCardByIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByIdsResponseValidationError) ErrorName() string {
	return "ListCollectionCardByIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByIdsResponseValidationError{}

// Validate checks the field values on ListCollectionCardByShopIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCollectionCardByShopIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByShopIdRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByShopIdRequestMultiError, or nil if none found.
func (m *ListCollectionCardByShopIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByShopIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetCursor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdRequestValidationError{
					field:  "Cursor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCursor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCollectionCardByShopIdRequestValidationError{
				field:  "Cursor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSort()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCollectionCardByShopIdRequestValidationError{
				field:  "Sort",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCollectionCardByShopIdRequestMultiError(errors)
	}

	return nil
}

// ListCollectionCardByShopIdRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListCollectionCardByShopIdRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionCardByShopIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByShopIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByShopIdRequestMultiError) AllErrors() []error { return m }

// ListCollectionCardByShopIdRequestValidationError is the validation error
// returned by ListCollectionCardByShopIdRequest.Validate if the designated
// constraints aren't met.
type ListCollectionCardByShopIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByShopIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByShopIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByShopIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByShopIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByShopIdRequestValidationError) ErrorName() string {
	return "ListCollectionCardByShopIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByShopIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByShopIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByShopIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByShopIdRequestValidationError{}

// Validate checks the field values on ListCollectionCardByShopIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCollectionCardByShopIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByShopIdResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByShopIdResponseMultiError, or nil if none found.
func (m *ListCollectionCardByShopIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByShopIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCollectionCardByShopIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCollectionCardByShopIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCollectionCardByShopIdResponseMultiError(errors)
	}

	return nil
}

// ListCollectionCardByShopIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListCollectionCardByShopIdResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionCardByShopIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByShopIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByShopIdResponseMultiError) AllErrors() []error { return m }

// ListCollectionCardByShopIdResponseValidationError is the validation error
// returned by ListCollectionCardByShopIdResponse.Validate if the designated
// constraints aren't met.
type ListCollectionCardByShopIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByShopIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByShopIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByShopIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByShopIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByShopIdResponseValidationError) ErrorName() string {
	return "ListCollectionCardByShopIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByShopIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByShopIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByShopIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByShopIdResponseValidationError{}

// Validate checks the field values on UpdateCollectionSkuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCollectionSkuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionSkuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCollectionSkuRequestMultiError, or nil if none found.
func (m *UpdateCollectionSkuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionSkuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetSkusOnlyId() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateCollectionSkuRequestValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateCollectionSkuRequestValidationError{
						field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateCollectionSkuRequestValidationError{
					field:  fmt.Sprintf("SkusOnlyId[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateCollectionSkuRequestMultiError(errors)
	}

	return nil
}

// UpdateCollectionSkuRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCollectionSkuRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCollectionSkuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionSkuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionSkuRequestMultiError) AllErrors() []error { return m }

// UpdateCollectionSkuRequestValidationError is the validation error returned
// by UpdateCollectionSkuRequest.Validate if the designated constraints aren't met.
type UpdateCollectionSkuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionSkuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionSkuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionSkuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionSkuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionSkuRequestValidationError) ErrorName() string {
	return "UpdateCollectionSkuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionSkuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionSkuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionSkuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionSkuRequestValidationError{}

// Validate checks the field values on UpdateCollectionSkuResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCollectionSkuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionSkuResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCollectionSkuResponseMultiError, or nil if none found.
func (m *UpdateCollectionSkuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionSkuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCollectionSkuResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCollectionSkuResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCollectionSkuResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCollectionSkuResponseMultiError(errors)
	}

	return nil
}

// UpdateCollectionSkuResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCollectionSkuResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCollectionSkuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionSkuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionSkuResponseMultiError) AllErrors() []error { return m }

// UpdateCollectionSkuResponseValidationError is the validation error returned
// by UpdateCollectionSkuResponse.Validate if the designated constraints
// aren't met.
type UpdateCollectionSkuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionSkuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionSkuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionSkuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionSkuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionSkuResponseValidationError) ErrorName() string {
	return "UpdateCollectionSkuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionSkuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionSkuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionSkuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionSkuResponseValidationError{}

// Validate checks the field values on UpdateCollectionStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCollectionStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCollectionStateRequestMultiError, or nil if none found.
func (m *UpdateCollectionStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateCollectionStateRequestMultiError(errors)
	}

	return nil
}

// UpdateCollectionStateRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCollectionStateRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCollectionStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionStateRequestMultiError) AllErrors() []error { return m }

// UpdateCollectionStateRequestValidationError is the validation error returned
// by UpdateCollectionStateRequest.Validate if the designated constraints
// aren't met.
type UpdateCollectionStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionStateRequestValidationError) ErrorName() string {
	return "UpdateCollectionStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionStateRequestValidationError{}

// Validate checks the field values on UpdateCollectionStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCollectionStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCollectionStateResponseMultiError, or nil if none found.
func (m *UpdateCollectionStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCollectionStateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCollectionStateResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCollectionStateResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCollectionStateResponseMultiError(errors)
	}

	return nil
}

// UpdateCollectionStateResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCollectionStateResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCollectionStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionStateResponseMultiError) AllErrors() []error { return m }

// UpdateCollectionStateResponseValidationError is the validation error
// returned by UpdateCollectionStateResponse.Validate if the designated
// constraints aren't met.
type UpdateCollectionStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionStateResponseValidationError) ErrorName() string {
	return "UpdateCollectionStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionStateResponseValidationError{}

// Validate checks the field values on CreateCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemRequestMultiError, or nil if none found.
func (m *CreateCartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Uid

	// no validation rules for CollectionId

	// no validation rules for ProductId

	// no validation rules for Quantity

	if len(errors) > 0 {
		return CreateCartItemRequestMultiError(errors)
	}

	return nil
}

// CreateCartItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCartItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemRequestMultiError) AllErrors() []error { return m }

// CreateCartItemRequestValidationError is the validation error returned by
// CreateCartItemRequest.Validate if the designated constraints aren't met.
type CreateCartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemRequestValidationError) ErrorName() string {
	return "CreateCartItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemRequestValidationError{}

// Validate checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemResponseMultiError, or nil if none found.
func (m *CreateCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCartItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCartItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCartItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCartItemResponseMultiError(errors)
	}

	return nil
}

// CreateCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemResponseMultiError) AllErrors() []error { return m }

// CreateCartItemResponseValidationError is the validation error returned by
// CreateCartItemResponse.Validate if the designated constraints aren't met.
type CreateCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemResponseValidationError) ErrorName() string {
	return "CreateCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemResponseValidationError{}

// Validate checks the field values on GetCartItemByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCartItemByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartItemByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartItemByIdRequestMultiError, or nil if none found.
func (m *GetCartItemByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartItemByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCartItemByIdRequestMultiError(errors)
	}

	return nil
}

// GetCartItemByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCartItemByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCartItemByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartItemByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartItemByIdRequestMultiError) AllErrors() []error { return m }

// GetCartItemByIdRequestValidationError is the validation error returned by
// GetCartItemByIdRequest.Validate if the designated constraints aren't met.
type GetCartItemByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartItemByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartItemByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartItemByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartItemByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartItemByIdRequestValidationError) ErrorName() string {
	return "GetCartItemByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCartItemByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartItemByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartItemByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartItemByIdRequestValidationError{}

// Validate checks the field values on GetCartItemByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCartItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartItemByIdResponseMultiError, or nil if none found.
func (m *GetCartItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCartItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCartItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCartItemByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCartItemByIdResponseMultiError(errors)
	}

	return nil
}

// GetCartItemByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetCartItemByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCartItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartItemByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartItemByIdResponseMultiError) AllErrors() []error { return m }

// GetCartItemByIdResponseValidationError is the validation error returned by
// GetCartItemByIdResponse.Validate if the designated constraints aren't met.
type GetCartItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartItemByIdResponseValidationError) ErrorName() string {
	return "GetCartItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCartItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartItemByIdResponseValidationError{}

// Validate checks the field values on UpdateCartItemQuantityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemQuantityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemQuantityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCartItemQuantityRequestMultiError, or nil if none found.
func (m *UpdateCartItemQuantityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemQuantityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Quantity

	if len(errors) > 0 {
		return UpdateCartItemQuantityRequestMultiError(errors)
	}

	return nil
}

// UpdateCartItemQuantityRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCartItemQuantityRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateCartItemQuantityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemQuantityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemQuantityRequestMultiError) AllErrors() []error { return m }

// UpdateCartItemQuantityRequestValidationError is the validation error
// returned by UpdateCartItemQuantityRequest.Validate if the designated
// constraints aren't met.
type UpdateCartItemQuantityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemQuantityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemQuantityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemQuantityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemQuantityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemQuantityRequestValidationError) ErrorName() string {
	return "UpdateCartItemQuantityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemQuantityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemQuantityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemQuantityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemQuantityRequestValidationError{}

// Validate checks the field values on UpdateCartItemQuantityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemQuantityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemQuantityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCartItemQuantityResponseMultiError, or nil if none found.
func (m *UpdateCartItemQuantityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemQuantityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCartItemQuantityResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCartItemQuantityResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCartItemQuantityResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCartItemQuantityResponseMultiError(errors)
	}

	return nil
}

// UpdateCartItemQuantityResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCartItemQuantityResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCartItemQuantityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemQuantityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemQuantityResponseMultiError) AllErrors() []error { return m }

// UpdateCartItemQuantityResponseValidationError is the validation error
// returned by UpdateCartItemQuantityResponse.Validate if the designated
// constraints aren't met.
type UpdateCartItemQuantityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemQuantityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemQuantityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemQuantityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemQuantityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemQuantityResponseValidationError) ErrorName() string {
	return "UpdateCartItemQuantityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemQuantityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemQuantityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemQuantityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemQuantityResponseValidationError{}

// Validate checks the field values on DeleteCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemRequestMultiError, or nil if none found.
func (m *DeleteCartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCartItemRequestMultiError(errors)
	}

	return nil
}

// DeleteCartItemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemRequestMultiError) AllErrors() []error { return m }

// DeleteCartItemRequestValidationError is the validation error returned by
// DeleteCartItemRequest.Validate if the designated constraints aren't met.
type DeleteCartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemRequestValidationError) ErrorName() string {
	return "DeleteCartItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemRequestValidationError{}

// Validate checks the field values on DeleteCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemResponseMultiError, or nil if none found.
func (m *DeleteCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCartItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCartItemResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCartItemResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCartItemResponseMultiError(errors)
	}

	return nil
}

// DeleteCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemResponseMultiError) AllErrors() []error { return m }

// DeleteCartItemResponseValidationError is the validation error returned by
// DeleteCartItemResponse.Validate if the designated constraints aren't met.
type DeleteCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemResponseValidationError) ErrorName() string {
	return "DeleteCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemResponseValidationError{}

// Validate checks the field values on ListCartItemByUidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCartItemByUidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartItemByUidRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCartItemByUidRequestMultiError, or nil if none found.
func (m *ListCartItemByUidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartItemByUidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return ListCartItemByUidRequestMultiError(errors)
	}

	return nil
}

// ListCartItemByUidRequestMultiError is an error wrapping multiple validation
// errors returned by ListCartItemByUidRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCartItemByUidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartItemByUidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartItemByUidRequestMultiError) AllErrors() []error { return m }

// ListCartItemByUidRequestValidationError is the validation error returned by
// ListCartItemByUidRequest.Validate if the designated constraints aren't met.
type ListCartItemByUidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartItemByUidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartItemByUidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartItemByUidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartItemByUidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartItemByUidRequestValidationError) ErrorName() string {
	return "ListCartItemByUidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCartItemByUidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartItemByUidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartItemByUidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartItemByUidRequestValidationError{}

// Validate checks the field values on ListCartItemByUidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCartItemByUidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartItemByUidResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCartItemByUidResponseMultiError, or nil if none found.
func (m *ListCartItemByUidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartItemByUidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCartItemByUidResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCartItemByUidResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCartItemByUidResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCartItemByUidResponseMultiError(errors)
	}

	return nil
}

// ListCartItemByUidResponseMultiError is an error wrapping multiple validation
// errors returned by ListCartItemByUidResponse.ValidateAll() if the
// designated constraints aren't met.
type ListCartItemByUidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartItemByUidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartItemByUidResponseMultiError) AllErrors() []error { return m }

// ListCartItemByUidResponseValidationError is the validation error returned by
// ListCartItemByUidResponse.Validate if the designated constraints aren't met.
type ListCartItemByUidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartItemByUidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartItemByUidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartItemByUidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartItemByUidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartItemByUidResponseValidationError) ErrorName() string {
	return "ListCartItemByUidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCartItemByUidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartItemByUidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartItemByUidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartItemByUidResponseValidationError{}

// Validate checks the field values on CreateShopResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShopResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShopResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShopResponse_DataMultiError, or nil if none found.
func (m *CreateShopResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShopResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateShopResponse_DataMultiError(errors)
	}

	return nil
}

// CreateShopResponse_DataMultiError is an error wrapping multiple validation
// errors returned by CreateShopResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type CreateShopResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShopResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShopResponse_DataMultiError) AllErrors() []error { return m }

// CreateShopResponse_DataValidationError is the validation error returned by
// CreateShopResponse_Data.Validate if the designated constraints aren't met.
type CreateShopResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopResponse_DataValidationError) ErrorName() string {
	return "CreateShopResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopResponse_DataValidationError{}

// Validate checks the field values on GetShopByIdResponse_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShopByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShopByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShopByIdResponse_DataMultiError, or nil if none found.
func (m *GetShopByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShopByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShop()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShopByIdResponse_DataValidationError{
					field:  "Shop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShopByIdResponse_DataValidationError{
					field:  "Shop",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShop()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShopByIdResponse_DataValidationError{
				field:  "Shop",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShopByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetShopByIdResponse_DataMultiError is an error wrapping multiple validation
// errors returned by GetShopByIdResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetShopByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShopByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShopByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetShopByIdResponse_DataValidationError is the validation error returned by
// GetShopByIdResponse_Data.Validate if the designated constraints aren't met.
type GetShopByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShopByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShopByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShopByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShopByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShopByIdResponse_DataValidationError) ErrorName() string {
	return "GetShopByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetShopByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShopByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShopByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShopByIdResponse_DataValidationError{}

// Validate checks the field values on CreateProductResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponse_DataMultiError, or nil if none found.
func (m *CreateProductResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductResponse_DataMultiError(errors)
	}

	return nil
}

// CreateProductResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CreateProductResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type CreateProductResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponse_DataMultiError) AllErrors() []error { return m }

// CreateProductResponse_DataValidationError is the validation error returned
// by CreateProductResponse_Data.Validate if the designated constraints aren't met.
type CreateProductResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponse_DataValidationError) ErrorName() string {
	return "CreateProductResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponse_DataValidationError{}

// Validate checks the field values on GetProductByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIdResponse_DataMultiError, or nil if none found.
func (m *GetProductByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductByIdResponse_DataValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductByIdResponse_DataValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductByIdResponse_DataValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetProductByIdResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetProductByIdResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetProductByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetProductByIdResponse_DataValidationError is the validation error returned
// by GetProductByIdResponse_Data.Validate if the designated constraints
// aren't met.
type GetProductByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIdResponse_DataValidationError) ErrorName() string {
	return "GetProductByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIdResponse_DataValidationError{}

// Validate checks the field values on CreateCollectionResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCollectionResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCollectionResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCollectionResponse_DataMultiError, or nil if none found.
func (m *CreateCollectionResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCollectionResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCollectionResponse_DataMultiError(errors)
	}

	return nil
}

// CreateCollectionResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CreateCollectionResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type CreateCollectionResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCollectionResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCollectionResponse_DataMultiError) AllErrors() []error { return m }

// CreateCollectionResponse_DataValidationError is the validation error
// returned by CreateCollectionResponse_Data.Validate if the designated
// constraints aren't met.
type CreateCollectionResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCollectionResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCollectionResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCollectionResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCollectionResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCollectionResponse_DataValidationError) ErrorName() string {
	return "CreateCollectionResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCollectionResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCollectionResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCollectionResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCollectionResponse_DataValidationError{}

// Validate checks the field values on GetCollectionByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCollectionByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionByIdResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCollectionByIdResponse_DataMultiError, or nil if none found.
func (m *GetCollectionByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollection()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionByIdResponse_DataValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionByIdResponse_DataValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionByIdResponse_DataValidationError{
				field:  "Collection",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetCollectionByIdResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetCollectionByIdResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type GetCollectionByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetCollectionByIdResponse_DataValidationError is the validation error
// returned by GetCollectionByIdResponse_Data.Validate if the designated
// constraints aren't met.
type GetCollectionByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionByIdResponse_DataValidationError) ErrorName() string {
	return "GetCollectionByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionByIdResponse_DataValidationError{}

// Validate checks the field values on GetCollectionCardByIdResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCollectionCardByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCollectionCardByIdResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCollectionCardByIdResponse_DataMultiError, or nil if none found.
func (m *GetCollectionCardByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCollectionCardByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCollectionCard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCollectionCardByIdResponse_DataValidationError{
					field:  "CollectionCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCollectionCardByIdResponse_DataValidationError{
					field:  "CollectionCard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCollectionCard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCollectionCardByIdResponse_DataValidationError{
				field:  "CollectionCard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCollectionCardByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetCollectionCardByIdResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// GetCollectionCardByIdResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type GetCollectionCardByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCollectionCardByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCollectionCardByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetCollectionCardByIdResponse_DataValidationError is the validation error
// returned by GetCollectionCardByIdResponse_Data.Validate if the designated
// constraints aren't met.
type GetCollectionCardByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCollectionCardByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCollectionCardByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCollectionCardByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCollectionCardByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCollectionCardByIdResponse_DataValidationError) ErrorName() string {
	return "GetCollectionCardByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetCollectionCardByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCollectionCardByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCollectionCardByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCollectionCardByIdResponse_DataValidationError{}

// Validate checks the field values on ListCollectionCardByIdsRequestId with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListCollectionCardByIdsRequestId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByIdsRequestId with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByIdsRequestIdMultiError, or nil if none found.
func (m *ListCollectionCardByIdsRequestId) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByIdsRequestId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListCollectionCardByIdsRequestIdMultiError(errors)
	}

	return nil
}

// ListCollectionCardByIdsRequestIdMultiError is an error wrapping multiple
// validation errors returned by
// ListCollectionCardByIdsRequestId.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionCardByIdsRequestIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByIdsRequestIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByIdsRequestIdMultiError) AllErrors() []error { return m }

// ListCollectionCardByIdsRequestIdValidationError is the validation error
// returned by ListCollectionCardByIdsRequestId.Validate if the designated
// constraints aren't met.
type ListCollectionCardByIdsRequestIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByIdsRequestIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByIdsRequestIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByIdsRequestIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByIdsRequestIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByIdsRequestIdValidationError) ErrorName() string {
	return "ListCollectionCardByIdsRequestIdValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByIdsRequestIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByIdsRequestId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByIdsRequestIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByIdsRequestIdValidationError{}

// Validate checks the field values on ListCollectionCardByIdsResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCollectionCardByIdsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCollectionCardByIdsResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCollectionCardByIdsResponse_DataMultiError, or nil if none found.
func (m *ListCollectionCardByIdsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByIdsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollectionCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCollectionCardByIdsResponse_DataValidationError{
						field:  fmt.Sprintf("CollectionCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCollectionCardByIdsResponse_DataValidationError{
						field:  fmt.Sprintf("CollectionCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCollectionCardByIdsResponse_DataValidationError{
					field:  fmt.Sprintf("CollectionCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCollectionCardByIdsResponse_DataMultiError(errors)
	}

	return nil
}

// ListCollectionCardByIdsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// ListCollectionCardByIdsResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionCardByIdsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByIdsResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByIdsResponse_DataMultiError) AllErrors() []error { return m }

// ListCollectionCardByIdsResponse_DataValidationError is the validation error
// returned by ListCollectionCardByIdsResponse_Data.Validate if the designated
// constraints aren't met.
type ListCollectionCardByIdsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByIdsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByIdsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByIdsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByIdsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByIdsResponse_DataValidationError) ErrorName() string {
	return "ListCollectionCardByIdsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByIdsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByIdsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByIdsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByIdsResponse_DataValidationError{}

// Validate checks the field values on ListCollectionCardByShopIdResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCollectionCardByShopIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCollectionCardByShopIdResponse_Data with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListCollectionCardByShopIdResponse_DataMultiError, or nil if none found.
func (m *ListCollectionCardByShopIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCollectionCardByShopIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCollectionCards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCollectionCardByShopIdResponse_DataValidationError{
						field:  fmt.Sprintf("CollectionCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCollectionCardByShopIdResponse_DataValidationError{
						field:  fmt.Sprintf("CollectionCards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCollectionCardByShopIdResponse_DataValidationError{
					field:  fmt.Sprintf("CollectionCards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCollectionCardByShopIdResponse_DataMultiError(errors)
	}

	return nil
}

// ListCollectionCardByShopIdResponse_DataMultiError is an error wrapping
// multiple validation errors returned by
// ListCollectionCardByShopIdResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ListCollectionCardByShopIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCollectionCardByShopIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCollectionCardByShopIdResponse_DataMultiError) AllErrors() []error { return m }

// ListCollectionCardByShopIdResponse_DataValidationError is the validation
// error returned by ListCollectionCardByShopIdResponse_Data.Validate if the
// designated constraints aren't met.
type ListCollectionCardByShopIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCollectionCardByShopIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCollectionCardByShopIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCollectionCardByShopIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCollectionCardByShopIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCollectionCardByShopIdResponse_DataValidationError) ErrorName() string {
	return "ListCollectionCardByShopIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCollectionCardByShopIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCollectionCardByShopIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCollectionCardByShopIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCollectionCardByShopIdResponse_DataValidationError{}

// Validate checks the field values on UpdateCollectionSkuResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCollectionSkuResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionSkuResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCollectionSkuResponse_DataMultiError, or nil if none found.
func (m *UpdateCollectionSkuResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionSkuResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCollectionSkuResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateCollectionSkuResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCollectionSkuResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateCollectionSkuResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionSkuResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionSkuResponse_DataMultiError) AllErrors() []error { return m }

// UpdateCollectionSkuResponse_DataValidationError is the validation error
// returned by UpdateCollectionSkuResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateCollectionSkuResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionSkuResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionSkuResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionSkuResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionSkuResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionSkuResponse_DataValidationError) ErrorName() string {
	return "UpdateCollectionSkuResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionSkuResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionSkuResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionSkuResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionSkuResponse_DataValidationError{}

// Validate checks the field values on UpdateCollectionStateResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCollectionStateResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCollectionStateResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCollectionStateResponse_DataMultiError, or nil if none found.
func (m *UpdateCollectionStateResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCollectionStateResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCollectionStateResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateCollectionStateResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCollectionStateResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateCollectionStateResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCollectionStateResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCollectionStateResponse_DataMultiError) AllErrors() []error { return m }

// UpdateCollectionStateResponse_DataValidationError is the validation error
// returned by UpdateCollectionStateResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateCollectionStateResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCollectionStateResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCollectionStateResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCollectionStateResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCollectionStateResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCollectionStateResponse_DataValidationError) ErrorName() string {
	return "UpdateCollectionStateResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCollectionStateResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCollectionStateResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCollectionStateResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCollectionStateResponse_DataValidationError{}

// Validate checks the field values on CreateCartItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemResponse_DataMultiError, or nil if none found.
func (m *CreateCartItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCartItemResponse_DataMultiError(errors)
	}

	return nil
}

// CreateCartItemResponse_DataMultiError is an error wrapping multiple
// validation errors returned by CreateCartItemResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type CreateCartItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemResponse_DataMultiError) AllErrors() []error { return m }

// CreateCartItemResponse_DataValidationError is the validation error returned
// by CreateCartItemResponse_Data.Validate if the designated constraints
// aren't met.
type CreateCartItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemResponse_DataValidationError) ErrorName() string {
	return "CreateCartItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemResponse_DataValidationError{}

// Validate checks the field values on GetCartItemByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCartItemByIdResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCartItemByIdResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCartItemByIdResponse_DataMultiError, or nil if none found.
func (m *GetCartItemByIdResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCartItemByIdResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCartItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCartItemByIdResponse_DataValidationError{
					field:  "CartItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCartItemByIdResponse_DataValidationError{
					field:  "CartItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCartItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCartItemByIdResponse_DataValidationError{
				field:  "CartItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCartItemByIdResponse_DataMultiError(errors)
	}

	return nil
}

// GetCartItemByIdResponse_DataMultiError is an error wrapping multiple
// validation errors returned by GetCartItemByIdResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type GetCartItemByIdResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCartItemByIdResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCartItemByIdResponse_DataMultiError) AllErrors() []error { return m }

// GetCartItemByIdResponse_DataValidationError is the validation error returned
// by GetCartItemByIdResponse_Data.Validate if the designated constraints
// aren't met.
type GetCartItemByIdResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCartItemByIdResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCartItemByIdResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCartItemByIdResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCartItemByIdResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCartItemByIdResponse_DataValidationError) ErrorName() string {
	return "GetCartItemByIdResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e GetCartItemByIdResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCartItemByIdResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCartItemByIdResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCartItemByIdResponse_DataValidationError{}

// Validate checks the field values on UpdateCartItemQuantityResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCartItemQuantityResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemQuantityResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCartItemQuantityResponse_DataMultiError, or nil if none found.
func (m *UpdateCartItemQuantityResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemQuantityResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCartItemQuantityResponse_DataMultiError(errors)
	}

	return nil
}

// UpdateCartItemQuantityResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCartItemQuantityResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type UpdateCartItemQuantityResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemQuantityResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemQuantityResponse_DataMultiError) AllErrors() []error { return m }

// UpdateCartItemQuantityResponse_DataValidationError is the validation error
// returned by UpdateCartItemQuantityResponse_Data.Validate if the designated
// constraints aren't met.
type UpdateCartItemQuantityResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemQuantityResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemQuantityResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemQuantityResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemQuantityResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemQuantityResponse_DataValidationError) ErrorName() string {
	return "UpdateCartItemQuantityResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemQuantityResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemQuantityResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemQuantityResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemQuantityResponse_DataValidationError{}

// Validate checks the field values on DeleteCartItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemResponse_DataMultiError, or nil if none found.
func (m *DeleteCartItemResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCartItemResponse_DataMultiError(errors)
	}

	return nil
}

// DeleteCartItemResponse_DataMultiError is an error wrapping multiple
// validation errors returned by DeleteCartItemResponse_Data.ValidateAll() if
// the designated constraints aren't met.
type DeleteCartItemResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemResponse_DataMultiError) AllErrors() []error { return m }

// DeleteCartItemResponse_DataValidationError is the validation error returned
// by DeleteCartItemResponse_Data.Validate if the designated constraints
// aren't met.
type DeleteCartItemResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemResponse_DataValidationError) ErrorName() string {
	return "DeleteCartItemResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemResponse_DataValidationError{}

// Validate checks the field values on ListCartItemByUidResponse_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCartItemByUidResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartItemByUidResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCartItemByUidResponse_DataMultiError, or nil if none found.
func (m *ListCartItemByUidResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartItemByUidResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCartItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCartItemByUidResponse_DataValidationError{
						field:  fmt.Sprintf("CartItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCartItemByUidResponse_DataValidationError{
						field:  fmt.Sprintf("CartItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCartItemByUidResponse_DataValidationError{
					field:  fmt.Sprintf("CartItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCartItemByUidResponse_DataMultiError(errors)
	}

	return nil
}

// ListCartItemByUidResponse_DataMultiError is an error wrapping multiple
// validation errors returned by ListCartItemByUidResponse_Data.ValidateAll()
// if the designated constraints aren't met.
type ListCartItemByUidResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartItemByUidResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartItemByUidResponse_DataMultiError) AllErrors() []error { return m }

// ListCartItemByUidResponse_DataValidationError is the validation error
// returned by ListCartItemByUidResponse_Data.Validate if the designated
// constraints aren't met.
type ListCartItemByUidResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartItemByUidResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartItemByUidResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartItemByUidResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartItemByUidResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartItemByUidResponse_DataValidationError) ErrorName() string {
	return "ListCartItemByUidResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListCartItemByUidResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartItemByUidResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartItemByUidResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartItemByUidResponse_DataValidationError{}
