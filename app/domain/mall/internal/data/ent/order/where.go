// Code generated by ent, DO NOT EDIT.

package order

import (
	"redbook/app/domain/mall/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUID, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldState, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalQuantity applies equality check predicate on the "total_quantity" field. It's identical to TotalQuantityEQ.
func TotalQuantity(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalQuantity, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUID, v))
}

// OrderItemsIsNil applies the IsNil predicate on the "order_items" field.
func OrderItemsIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldOrderItems))
}

// OrderItemsNotNil applies the NotNil predicate on the "order_items" field.
func OrderItemsNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldOrderItems))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldState, v))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountIsNil applies the IsNil predicate on the "total_amount" field.
func TotalAmountIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTotalAmount))
}

// TotalAmountNotNil applies the NotNil predicate on the "total_amount" field.
func TotalAmountNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTotalAmount))
}

// TotalQuantityEQ applies the EQ predicate on the "total_quantity" field.
func TotalQuantityEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalQuantity, v))
}

// TotalQuantityNEQ applies the NEQ predicate on the "total_quantity" field.
func TotalQuantityNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalQuantity, v))
}

// TotalQuantityIn applies the In predicate on the "total_quantity" field.
func TotalQuantityIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalQuantity, vs...))
}

// TotalQuantityNotIn applies the NotIn predicate on the "total_quantity" field.
func TotalQuantityNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalQuantity, vs...))
}

// TotalQuantityGT applies the GT predicate on the "total_quantity" field.
func TotalQuantityGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalQuantity, v))
}

// TotalQuantityGTE applies the GTE predicate on the "total_quantity" field.
func TotalQuantityGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalQuantity, v))
}

// TotalQuantityLT applies the LT predicate on the "total_quantity" field.
func TotalQuantityLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalQuantity, v))
}

// TotalQuantityLTE applies the LTE predicate on the "total_quantity" field.
func TotalQuantityLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalQuantity, v))
}

// TotalQuantityIsNil applies the IsNil predicate on the "total_quantity" field.
func TotalQuantityIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTotalQuantity))
}

// TotalQuantityNotNil applies the NotNil predicate on the "total_quantity" field.
func TotalQuantityNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTotalQuantity))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
