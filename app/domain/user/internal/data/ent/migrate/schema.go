// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "uid", Type: field.TypeInt64, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "sex", Type: field.TypeInt32, Default: 0},
		{Name: "avatar", Type: field.TypeString, Default: "https://dummyimage.com/100"},
		{Name: "sign", Type: field.TypeString, Nullable: true},
		{Name: "birthday", Type: field.TypeTime, Nullable: true},
		{Name: "level", Type: field.TypeInt32, Default: 0},
		{Name: "verify_type", Type: field.TypeInt8, Default: 0},
		{Name: "attr", Type: field.TypeInt32, Default: 0},
		{Name: "state", Type: field.TypeInt32, Default: 0},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "user_profiles", Type: field.TypeInt64},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_users_profiles",
				Columns:    []*schema.Column{ProfilesColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "profile_id_uid",
				Unique:  true,
				Columns: []*schema.Column{ProfilesColumns[0], ProfilesColumns[1]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true},
		{Name: "uid", Type: field.TypeInt64, Unique: true},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "identification", Type: field.TypeInt, Nullable: true},
		{Name: "deleted", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_id_uid",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[0], UsersColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProfilesTable,
		UsersTable,
	}
)

func init() {
	ProfilesTable.ForeignKeys[0].RefTable = UsersTable
}
