// Code generated by ent, DO NOT EDIT.

package profile

import (
	"time"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldSign holds the string denoting the sign field in the database.
	FieldSign = "sign"
	// FieldBirthday holds the string denoting the birthday field in the database.
	FieldBirthday = "birthday"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldVerifyType holds the string denoting the verify_type field in the database.
	FieldVerifyType = "verify_type"
	// FieldAttr holds the string denoting the attr field in the database.
	FieldAttr = "attr"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_profiles"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldUID,
	FieldName,
	FieldSex,
	FieldAvatar,
	FieldSign,
	FieldBirthday,
	FieldLevel,
	FieldVerifyType,
	FieldAttr,
	FieldState,
	FieldDeleted,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_profiles",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSex holds the default value on creation for the "sex" field.
	DefaultSex int32
	// DefaultAvatar holds the default value on creation for the "avatar" field.
	DefaultAvatar string
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel int32
	// DefaultVerifyType holds the default value on creation for the "verify_type" field.
	DefaultVerifyType int8
	// DefaultAttr holds the default value on creation for the "attr" field.
	DefaultAttr int32
	// DefaultState holds the default value on creation for the "state" field.
	DefaultState int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
