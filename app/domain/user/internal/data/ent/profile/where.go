// Code generated by ent, DO NOT EDIT.

package profile

import (
	"redbook/app/domain/user/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldName, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldSex, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAvatar, v))
}

// Sign applies equality check predicate on the "sign" field. It's identical to SignEQ.
func Sign(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldSign, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBirthday, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldLevel, v))
}

// VerifyType applies equality check predicate on the "verify_type" field. It's identical to VerifyTypeEQ.
func VerifyType(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldVerifyType, v))
}

// Attr applies equality check predicate on the "attr" field. It's identical to AttrEQ.
func Attr(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAttr, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldState, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldDeleted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...int64) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...int64) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v int64) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldUID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldName, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldSex, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldAvatar, v))
}

// SignEQ applies the EQ predicate on the "sign" field.
func SignEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldSign, v))
}

// SignNEQ applies the NEQ predicate on the "sign" field.
func SignNEQ(v string) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldSign, v))
}

// SignIn applies the In predicate on the "sign" field.
func SignIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldSign, vs...))
}

// SignNotIn applies the NotIn predicate on the "sign" field.
func SignNotIn(vs ...string) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldSign, vs...))
}

// SignGT applies the GT predicate on the "sign" field.
func SignGT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldSign, v))
}

// SignGTE applies the GTE predicate on the "sign" field.
func SignGTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldSign, v))
}

// SignLT applies the LT predicate on the "sign" field.
func SignLT(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldSign, v))
}

// SignLTE applies the LTE predicate on the "sign" field.
func SignLTE(v string) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldSign, v))
}

// SignContains applies the Contains predicate on the "sign" field.
func SignContains(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContains(FieldSign, v))
}

// SignHasPrefix applies the HasPrefix predicate on the "sign" field.
func SignHasPrefix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasPrefix(FieldSign, v))
}

// SignHasSuffix applies the HasSuffix predicate on the "sign" field.
func SignHasSuffix(v string) predicate.Profile {
	return predicate.Profile(sql.FieldHasSuffix(FieldSign, v))
}

// SignIsNil applies the IsNil predicate on the "sign" field.
func SignIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldSign))
}

// SignNotNil applies the NotNil predicate on the "sign" field.
func SignNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldSign))
}

// SignEqualFold applies the EqualFold predicate on the "sign" field.
func SignEqualFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldEqualFold(FieldSign, v))
}

// SignContainsFold applies the ContainsFold predicate on the "sign" field.
func SignContainsFold(v string) predicate.Profile {
	return predicate.Profile(sql.FieldContainsFold(FieldSign, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.Profile {
	return predicate.Profile(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.Profile {
	return predicate.Profile(sql.FieldNotNull(FieldBirthday))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldLevel, v))
}

// VerifyTypeEQ applies the EQ predicate on the "verify_type" field.
func VerifyTypeEQ(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldVerifyType, v))
}

// VerifyTypeNEQ applies the NEQ predicate on the "verify_type" field.
func VerifyTypeNEQ(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldVerifyType, v))
}

// VerifyTypeIn applies the In predicate on the "verify_type" field.
func VerifyTypeIn(vs ...int8) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldVerifyType, vs...))
}

// VerifyTypeNotIn applies the NotIn predicate on the "verify_type" field.
func VerifyTypeNotIn(vs ...int8) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldVerifyType, vs...))
}

// VerifyTypeGT applies the GT predicate on the "verify_type" field.
func VerifyTypeGT(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldVerifyType, v))
}

// VerifyTypeGTE applies the GTE predicate on the "verify_type" field.
func VerifyTypeGTE(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldVerifyType, v))
}

// VerifyTypeLT applies the LT predicate on the "verify_type" field.
func VerifyTypeLT(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldVerifyType, v))
}

// VerifyTypeLTE applies the LTE predicate on the "verify_type" field.
func VerifyTypeLTE(v int8) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldVerifyType, v))
}

// AttrEQ applies the EQ predicate on the "attr" field.
func AttrEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldAttr, v))
}

// AttrNEQ applies the NEQ predicate on the "attr" field.
func AttrNEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldAttr, v))
}

// AttrIn applies the In predicate on the "attr" field.
func AttrIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldAttr, vs...))
}

// AttrNotIn applies the NotIn predicate on the "attr" field.
func AttrNotIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldAttr, vs...))
}

// AttrGT applies the GT predicate on the "attr" field.
func AttrGT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldAttr, v))
}

// AttrGTE applies the GTE predicate on the "attr" field.
func AttrGTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldAttr, v))
}

// AttrLT applies the LT predicate on the "attr" field.
func AttrLT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldAttr, v))
}

// AttrLTE applies the LTE predicate on the "attr" field.
func AttrLTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldAttr, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldState, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldDeleted, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		p(s.Not())
	})
}
