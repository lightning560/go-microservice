// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"redbook/app/domain/user/internal/data/ent/profile"
	"redbook/app/domain/user/internal/data/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (pc *ProfileCreate) SetUID(i int64) *ProfileCreate {
	pc.mutation.SetUID(i)
	return pc
}

// SetName sets the "name" field.
func (pc *ProfileCreate) SetName(s string) *ProfileCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSex sets the "sex" field.
func (pc *ProfileCreate) SetSex(i int32) *ProfileCreate {
	pc.mutation.SetSex(i)
	return pc
}

// SetNillableSex sets the "sex" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableSex(i *int32) *ProfileCreate {
	if i != nil {
		pc.SetSex(*i)
	}
	return pc
}

// SetAvatar sets the "avatar" field.
func (pc *ProfileCreate) SetAvatar(s string) *ProfileCreate {
	pc.mutation.SetAvatar(s)
	return pc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableAvatar(s *string) *ProfileCreate {
	if s != nil {
		pc.SetAvatar(*s)
	}
	return pc
}

// SetSign sets the "sign" field.
func (pc *ProfileCreate) SetSign(s string) *ProfileCreate {
	pc.mutation.SetSign(s)
	return pc
}

// SetNillableSign sets the "sign" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableSign(s *string) *ProfileCreate {
	if s != nil {
		pc.SetSign(*s)
	}
	return pc
}

// SetBirthday sets the "birthday" field.
func (pc *ProfileCreate) SetBirthday(t time.Time) *ProfileCreate {
	pc.mutation.SetBirthday(t)
	return pc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBirthday(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetBirthday(*t)
	}
	return pc
}

// SetLevel sets the "level" field.
func (pc *ProfileCreate) SetLevel(i int32) *ProfileCreate {
	pc.mutation.SetLevel(i)
	return pc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableLevel(i *int32) *ProfileCreate {
	if i != nil {
		pc.SetLevel(*i)
	}
	return pc
}

// SetVerifyType sets the "verify_type" field.
func (pc *ProfileCreate) SetVerifyType(i int8) *ProfileCreate {
	pc.mutation.SetVerifyType(i)
	return pc
}

// SetNillableVerifyType sets the "verify_type" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableVerifyType(i *int8) *ProfileCreate {
	if i != nil {
		pc.SetVerifyType(*i)
	}
	return pc
}

// SetAttr sets the "attr" field.
func (pc *ProfileCreate) SetAttr(i int32) *ProfileCreate {
	pc.mutation.SetAttr(i)
	return pc
}

// SetNillableAttr sets the "attr" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableAttr(i *int32) *ProfileCreate {
	if i != nil {
		pc.SetAttr(*i)
	}
	return pc
}

// SetState sets the "state" field.
func (pc *ProfileCreate) SetState(i int32) *ProfileCreate {
	pc.mutation.SetState(i)
	return pc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableState(i *int32) *ProfileCreate {
	if i != nil {
		pc.SetState(*i)
	}
	return pc
}

// SetDeleted sets the "deleted" field.
func (pc *ProfileCreate) SetDeleted(b bool) *ProfileCreate {
	pc.mutation.SetDeleted(b)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProfileCreate) SetCreatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProfileCreate) SetUpdatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableUpdatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProfileCreate) SetID(i int64) *ProfileCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pc *ProfileCreate) SetUserID(id int64) *ProfileCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetUser sets the "user" edge to the User entity.
func (pc *ProfileCreate) SetUser(u *User) *ProfileCreate {
	return pc.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	pc.defaults()
	return withHooks[*Profile, ProfileMutation](ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.Sex(); !ok {
		v := profile.DefaultSex
		pc.mutation.SetSex(v)
	}
	if _, ok := pc.mutation.Avatar(); !ok {
		v := profile.DefaultAvatar
		pc.mutation.SetAvatar(v)
	}
	if _, ok := pc.mutation.Level(); !ok {
		v := profile.DefaultLevel
		pc.mutation.SetLevel(v)
	}
	if _, ok := pc.mutation.VerifyType(); !ok {
		v := profile.DefaultVerifyType
		pc.mutation.SetVerifyType(v)
	}
	if _, ok := pc.mutation.Attr(); !ok {
		v := profile.DefaultAttr
		pc.mutation.SetAttr(v)
	}
	if _, ok := pc.mutation.State(); !ok {
		v := profile.DefaultState
		pc.mutation.SetState(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := profile.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := profile.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Profile.uid"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Profile.name"`)}
	}
	if _, ok := pc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "Profile.sex"`)}
	}
	if _, ok := pc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Profile.avatar"`)}
	}
	if _, ok := pc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Profile.level"`)}
	}
	if _, ok := pc.mutation.VerifyType(); !ok {
		return &ValidationError{Name: "verify_type", err: errors.New(`ent: missing required field "Profile.verify_type"`)}
	}
	if _, ok := pc.mutation.Attr(); !ok {
		return &ValidationError{Name: "attr", err: errors.New(`ent: missing required field "Profile.attr"`)}
	}
	if _, ok := pc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Profile.state"`)}
	}
	if _, ok := pc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Profile.deleted"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Profile.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Profile.updated_at"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Profile.user"`)}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt64))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.UID(); ok {
		_spec.SetField(profile.FieldUID, field.TypeInt64, value)
		_node.UID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Sex(); ok {
		_spec.SetField(profile.FieldSex, field.TypeInt32, value)
		_node.Sex = value
	}
	if value, ok := pc.mutation.Avatar(); ok {
		_spec.SetField(profile.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := pc.mutation.Sign(); ok {
		_spec.SetField(profile.FieldSign, field.TypeString, value)
		_node.Sign = value
	}
	if value, ok := pc.mutation.Birthday(); ok {
		_spec.SetField(profile.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	if value, ok := pc.mutation.Level(); ok {
		_spec.SetField(profile.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := pc.mutation.VerifyType(); ok {
		_spec.SetField(profile.FieldVerifyType, field.TypeInt8, value)
		_node.VerifyType = value
	}
	if value, ok := pc.mutation.Attr(); ok {
		_spec.SetField(profile.FieldAttr, field.TypeInt32, value)
		_node.Attr = value
	}
	if value, ok := pc.mutation.State(); ok {
		_spec.SetField(profile.FieldState, field.TypeInt32, value)
		_node.State = value
	}
	if value, ok := pc.mutation.Deleted(); ok {
		_spec.SetField(profile.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(profile.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(profile.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_profiles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	builders []*ProfileCreate
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
